{
  "entityType" : "DASHBOARD",
  "entity" : {
    "title" : "Indoor Air Quality",
    "image" : "tb-image;/api/images/tenant/indoor_air_quality_dashboard_image.svg",
    "mobileHide" : false,
    "mobileOrder" : 3,
    "configuration" : {
      "widgets" : {
        "f33c746c-0dfc-c212-395b-b448c8a17209" : {
          "type" : "latest",
          "sizeX" : 11,
          "sizeY" : 11,
          "config" : {
            "timewindow" : {
              "displayValue" : "",
              "selectedTab" : 0,
              "realtime" : {
                "realtimeType" : 1,
                "interval" : 1000,
                "timewindowMs" : 86400000,
                "quickInterval" : "CURRENT_DAY"
              },
              "history" : {
                "historyType" : 0,
                "interval" : 1000,
                "timewindowMs" : 60000,
                "fixedTimewindow" : {
                  "startTimeMs" : 1694102720479,
                  "endTimeMs" : 1694189120479
                },
                "quickInterval" : "CURRENT_DAY"
              },
              "aggregation" : {
                "type" : "NONE",
                "limit" : 200
              }
            },
            "showTitle" : true,
            "backgroundColor" : "rgb(255, 255, 255)",
            "color" : "rgba(0, 0, 0, 0.87)",
            "padding" : "4px",
            "settings" : {
              "enableSearch" : true,
              "displayPagination" : true,
              "defaultPageSize" : 10,
              "defaultSortOrder" : "entityName",
              "displayEntityName" : true,
              "displayEntityType" : false,
              "enableSelectColumnDisplay" : false,
              "entitiesTitle" : "Sensors",
              "displayEntityLabel" : false,
              "entityNameColumnTitle" : "Sensor name",
              "enableStickyHeader" : true,
              "enableStickyAction" : true,
              "reserveSpaceForHiddenAction" : "false"
            },
            "title" : "Sensors",
            "dropShadow" : false,
            "enableFullscreen" : false,
            "titleStyle" : {
              "fontSize" : "16px",
              "fontWeight" : 400,
              "padding" : "5px 10px 5px 10px"
            },
            "useDashboardTimewindow" : false,
            "showLegend" : false,
            "datasources" : [ {
              "type" : "entity",
              "name" : null,
              "entityAliasId" : "68a058e1-fdda-8482-715b-3ae4a488568e",
              "filterId" : null,
              "dataKeys" : [ {
                "name" : "active",
                "type" : "attribute",
                "label" : "Active",
                "color" : "#2196f3",
                "settings" : {
                  "columnWidth" : "0px",
                  "useCellStyleFunction" : true,
                  "useCellContentFunction" : true,
                  "cellContentFunction" : "value = '&#11044;';\nreturn value;",
                  "cellStyleFunction" : "var color;\nif (value === \"true\") {\n    color = 'rgb(39, 134, 34)';\n} else {\n    color = 'rgb(255, 0, 0)';\n}\nreturn {\n    color: color,\n    fontSize: '18px'\n};"
                },
                "_hash" : 0.9264526512320641
              }, {
                "name" : "co2",
                "type" : "timeseries",
                "label" : "CO₂",
                "color" : "#4caf50",
                "settings" : {
                  "columnWidth" : "20%",
                  "useCellStyleFunction" : false,
                  "useCellContentFunction" : false,
                  "defaultColumnVisibility" : "visible",
                  "columnSelectionToDisplay" : "enabled"
                },
                "_hash" : 0.9801965063904188,
                "units" : "ppm",
                "decimals" : 1,
                "funcBody" : null,
                "usePostProcessing" : null,
                "postFuncBody" : null
              }, {
                "name" : "tvoc",
                "type" : "timeseries",
                "label" : "TVOCs",
                "color" : "#f44336",
                "settings" : {
                  "columnWidth" : "0px",
                  "useCellStyleFunction" : false,
                  "useCellContentFunction" : false,
                  "defaultColumnVisibility" : "visible",
                  "columnSelectionToDisplay" : "enabled"
                },
                "_hash" : 0.5726727868178358,
                "units" : "mg/m³",
                "decimals" : 1,
                "funcBody" : null,
                "usePostProcessing" : null,
                "postFuncBody" : null
              } ]
            } ],
            "showTitleIcon" : false,
            "titleIcon" : null,
            "iconColor" : "rgba(0, 0, 0, 0.87)",
            "iconSize" : "24px",
            "titleTooltip" : "",
            "widgetStyle" : {
              "border-radius" : "8px",
              "box-shadow" : "0px 0px 5px rgba(0, 0, 0, 0.05), 0px 0px 20px -10px rgba(16, 16, 16, 0.35)"
            },
            "displayTimewindow" : true,
            "actions" : {
              "headerButton" : [ {
                "id" : "85b803db-90f2-5c63-1388-a378e0eb10d6",
                "name" : "Edit location",
                "icon" : "map",
                "type" : "openDashboardState",
                "targetDashboardStateId" : "map",
                "setEntityId" : false
              }, {
                "name" : "Add sensor",
                "icon" : "add",
                "useShowWidgetActionFunction" : true,
                "showWidgetActionFunction" : "return widgetContext.currentUser.authority == 'TENANT_ADMIN';",
                "type" : "customPretty",
                "customHtml" : "<form #addEntityForm=\"ngForm\" [formGroup]=\"addEntityFormGroup\"\n      (ngSubmit)=\"save()\" class=\"add-entity-form\">\n    <mat-toolbar fxLayout=\"row\" color=\"primary\">\n        <h2>Add air quality sensor</h2>\n        <span fxFlex></span>\n        <button mat-icon-button (click)=\"cancel()\" type=\"button\">\n            <mat-icon class=\"material-icons\">close</mat-icon>\n        </button>\n    </mat-toolbar>\n    <mat-progress-bar color=\"warn\" mode=\"indeterminate\" *ngIf=\"isLoading$ | async\">\n    </mat-progress-bar>\n    <div style=\"height: 4px;\" *ngIf=\"!(isLoading$ | async)\"></div>\n    <div mat-dialog-content fxLayout=\"column\">\n        <div fxLayout=\"row\" fxLayoutGap=\"8px\" fxLayout.xs=\"column\"  fxLayoutGap.xs=\"0\">\n            <mat-form-field fxFlex class=\"mat-block\">\n                <mat-label>Air quality sensor name</mat-label>\n                <input matInput formControlName=\"entityName\" required>\n                <mat-error *ngIf=\"addEntityFormGroup.get('entityName').hasError('required')\">\n                    Air quality sensor name is required.\n                </mat-error>\n            </mat-form-field>\n            <mat-form-field fxFlex class=\"mat-block\">\n                <mat-label>Air quality sensor label</mat-label>\n                <input matInput formControlName=\"entityLabel\" >\n            </mat-form-field>\n        </div>\n        <div formGroupName=\"attributes\" fxLayout=\"column\">\n            <div fxLayout=\"row\" fxLayoutGap=\"8px\" fxLayout.xs=\"column\"  fxLayoutGap.xs=\"0\">\n                <mat-form-field fxFlex class=\"mat-block\">\n                    <mat-label>Latitude</mat-label>\n                    <input type=\"number\" step=\"any\" matInput formControlName=\"latitude\">\n                </mat-form-field>\n                <mat-form-field fxFlex class=\"mat-block\">\n                    <mat-label>Longitude</mat-label>\n                    <input type=\"number\" step=\"any\" matInput formControlName=\"longitude\">\n                </mat-form-field>\n            </div>\n        </div>\n        <tb-entity-autocomplete\n            [entityType]='\"CUSTOMER\"'\n            formControlName=\"customerId\"\n        >\n        </tb-entity-autocomplete>\n    </div>\n    <div mat-dialog-actions fxLayout=\"row\" fxLayoutAlign=\"end center\">\n        <button mat-button color=\"primary\"\n                type=\"button\"\n                [disabled]=\"(isLoading$ | async)\"\n                (click)=\"cancel()\" cdkFocusInitial>\n            Cancel\n        </button>\n        <button mat-button mat-raised-button color=\"primary\"\n                type=\"submit\"\n                [disabled]=\"(isLoading$ | async) || addEntityForm.invalid || !addEntityForm.dirty\">\n            Create\n        </button>\n    </div>\n</form>",
                "customCss" : "/*=======================================================================*/\n/*==========  There are two examples: for edit and add entity  ==========*/\n/*=======================================================================*/\n/*========================  Edit entity example  ========================*/\n/*=======================================================================*/\n/*\n.edit-entity-form .boolean-value-input {\n    padding-left: 5px;\n}\n\n.edit-entity-form .boolean-value-input .checkbox-label {\n    margin-bottom: 8px;\n    color: rgba(0,0,0,0.54);\n    font-size: 12px;\n}\n\n.relations-list .header {\n    padding-right: 5px;\n    padding-bottom: 5px;\n    padding-left: 5px;\n}\n\n.relations-list .header .cell {\n    padding-right: 5px;\n    padding-left: 5px;\n    font-size: 12px;\n    font-weight: 700;\n    color: rgba(0, 0, 0, .54);\n    white-space: nowrap;\n}\n\n.relations-list .mat-form-field-infix {\n    width: auto !important;\n}\n\n.relations-list .body {\n    padding-right: 5px;\n    padding-bottom: 15px;\n    padding-left: 5px;\n}\n\n.relations-list .body .row {\n    padding-top: 5px;\n}\n\n.relations-list .body .cell {\n    padding-right: 5px;\n    padding-left: 5px;\n}\n\n.relations-list .body .md-button {\n    margin: 0;\n}\n*/\n/*========================================================================*/\n/*=========================  Add entity example  =========================*/\n/*========================================================================*/\n/*\n.add-entity-form .boolean-value-input {\n    padding-left: 5px;\n}\n\n.add-entity-form .boolean-value-input .checkbox-label {\n    margin-bottom: 8px;\n    color: rgba(0,0,0,0.54);\n    font-size: 12px;\n}\n\n.relations-list .header {\n    padding-right: 5px;\n    padding-bottom: 5px;\n    padding-left: 5px;\n}\n\n.relations-list .header .cell {\n    padding-right: 5px;\n    padding-left: 5px;\n    font-size: 12px;\n    font-weight: 700;\n    color: rgba(0, 0, 0, .54);\n    white-space: nowrap;\n}\n\n.relations-list .mat-form-field-infix {\n    width: auto !important;\n}\n\n.relations-list .body {\n    padding-right: 5px;\n    padding-bottom: 15px;\n    padding-left: 5px;\n}\n\n.relations-list .body .row {\n    padding-top: 5px;\n}\n\n.relations-list .body .cell {\n    padding-right: 5px;\n    padding-left: 5px;\n}\n\n.relations-list .body .md-button {\n    margin: 0;\n}\n*/\n",
                "customFunction" : "let $injector = widgetContext.$scope.$injector;\nlet stateController = widgetContext.stateController;\nlet customDialog = $injector.get(widgetContext.servicesMap.get('customDialog'));\nlet deviceService = $injector.get(widgetContext.servicesMap.get('deviceService'));\nlet attributeService = $injector.get(widgetContext.servicesMap.get('attributeService'));\nlet entityRelationService = $injector.get(widgetContext.servicesMap.get('entityRelationService'));\n\nopenAddEntityDialog();\n\nfunction openAddEntityDialog() {\n    customDialog.customDialog(htmlTemplate, AddEntityDialogController).subscribe();\n}\n\nfunction AddEntityDialogController(instance) {\n    let vm = instance;\n    \n    vm.addEntityFormGroup = vm.fb.group({\n     entityName: ['', [vm.validators.required]],\n     entityLabel: [null],\n     attributes: vm.fb.group({\n         latitude: [null],\n         longitude: [null]\n     }),\n     customerId: [null]\n    });\n\n    vm.cancel = function() {\n        vm.dialogRef.close(null);\n    };\n\n    vm.save = function() {\n        saveEntityObservable().subscribe(\n            function (entity) {\n                widgetContext.rxjs.forkJoin([\n                    saveAttributes(entity.id),\n                    saveRelations(entity.id)\n                ]).subscribe(\n                    function () {\n                        widgetContext.updateAliases();\n                        vm.dialogRef.close(null);\n                    }\n                );\n            }\n        );\n    };\n\n    function saveEntityObservable() {\n        const formValues = vm.addEntityFormGroup.value;\n        let entity = {\n            name: formValues.entityName,\n            type: 'Air Quality Sensor',\n            label: formValues.entityLabel\n        };\n        if (formValues.customerId !== null) {\n            entity.customerId = {id: formValues.customerId, entityType: \"CUSTOMER\"};\n        }\n        return deviceService.saveDevice(entity);\n    }\n\n    function saveAttributes(entityId) {\n        let attributes = vm.addEntityFormGroup.get('attributes').value;\n        let attributesArray = [];\n        for (let key in attributes) {\n            if(attributes[key] !== null) {\n                attributesArray.push({key: key, value: attributes[key]});\n            }\n        }\n        if (attributesArray.length > 0) {\n            return attributeService.saveEntityAttributes(entityId, \"SERVER_SCOPE\", attributesArray);\n        }\n        return widgetContext.rxjs.of([]);\n    }\n\n    function createRelation() {\n        return [{\n            direction: 'TO',\n            relationType: 'Contains',\n            relatedEntity: stateController.getStateParams().entityId\n        }];\n    }\n\n    function saveRelations(entityId) {\n        let relations = createRelation();\n        let tasks = [];\n        for(let i=0; i < relations.length; i++) {\n            let relation = {\n                type: relations[i].relationType,\n                typeGroup: 'COMMON'\n            };\n            if (relations[i].direction == 'FROM') {\n                relation.to = relations[i].relatedEntity;\n                relation.from = entityId;\n            } else {\n                relation.to = entityId;\n                relation.from = relations[i].relatedEntity;\n            }\n            tasks.push(entityRelationService.saveRelation(relation));\n        }\n        if (tasks.length > 0) {\n            return widgetContext.rxjs.forkJoin(tasks);\n        }\n        return widgetContext.rxjs.of([]);\n    }\n}",
                "customResources" : [ ],
                "id" : "505167f8-ec8e-5473-567e-183f8fdf2cbe"
              } ],
              "actionCellButton" : [ {
                "name" : "Sensor details",
                "icon" : "show_chart",
                "type" : "openDashboardState",
                "targetDashboardStateId" : "chart",
                "setEntityId" : true,
                "stateEntityParamName" : null,
                "openInSeparateDialog" : null,
                "dialogTitle" : null,
                "dialogHideDashboardToolbar" : true,
                "dialogWidth" : null,
                "dialogHeight" : null,
                "openRightLayout" : null,
                "id" : "ca241cd8-788d-5508-a9ce-74b03ef42a7f"
              }, {
                "name" : "Edit sensor",
                "icon" : "edit",
                "useShowWidgetActionFunction" : false,
                "showWidgetActionFunction" : "",
                "type" : "customPretty",
                "customHtml" : "<form #editEntityForm=\"ngForm\" [formGroup]=\"editEntityFormGroup\"\n      (ngSubmit)=\"save()\"  class=\"edit-entity-form\">\n    <mat-toolbar fxLayout=\"row\" color=\"primary\">\n        <h2>Edit air sensor: {{entityName}}</h2>\n        <span fxFlex></span>\n        <button mat-icon-button (click)=\"cancel()\" type=\"button\">\n            <mat-icon class=\"material-icons\">close</mat-icon>\n        </button>\n    </mat-toolbar>\n    <mat-progress-bar color=\"warn\" mode=\"indeterminate\" *ngIf=\"isLoading$ | async\">\n    </mat-progress-bar>\n    <div style=\"height: 4px;\" *ngIf=\"!(isLoading$ | async)\"></div>\n    <div mat-dialog-content fxLayout=\"column\">\n        <div fxLayout=\"row\" fxLayoutGap=\"8px\" fxLayout.xs=\"column\"  fxLayoutGap.xs=\"0\">\n            <mat-form-field fxFlex class=\"mat-block\">\n                <mat-label>Air quality sensor name</mat-label>\n                <input matInput formControlName=\"entityName\" required readonly=\"\">\n            </mat-form-field>\n            <mat-form-field fxFlex class=\"mat-block\">\n                <mat-label>Air quality sensor label</mat-label>\n                <input matInput formControlName=\"entityLabel\" >\n            </mat-form-field>\n        </div>\n        <div formGroupName=\"attributes\" fxLayout=\"column\">\n            <div fxLayout=\"row\" fxLayoutGap=\"8px\" fxLayout.xs=\"column\"  fxLayoutGap.xs=\"0\">\n                <mat-form-field fxFlex class=\"mat-block\">\n                    <mat-label>Latitude</mat-label>\n                    <input type=\"number\" step=\"any\" matInput formControlName=\"latitude\">\n                </mat-form-field>\n                <mat-form-field fxFlex class=\"mat-block\">\n                    <mat-label>Longitude</mat-label>\n                    <input type=\"number\" step=\"any\" matInput formControlName=\"longitude\">\n                </mat-form-field>\n            </div>\n        </div>\n        <tb-entity-autocomplete\n            *ngIf=isTenant\n            [entityType]='\"CUSTOMER\"'\n            formControlName=\"customerId\"\n        >\n        </tb-entity-autocomplete>\n    </div>\n    <div mat-dialog-actions fxLayout=\"row\" fxLayoutAlign=\"end center\">\n        <button mat-button color=\"primary\"\n                type=\"button\"\n                [disabled]=\"(isLoading$ | async)\"\n                (click)=\"cancel()\" cdkFocusInitial>\n            Cancel\n        </button>\n        <button mat-button mat-raised-button color=\"primary\"\n                type=\"submit\"\n                [disabled]=\"(isLoading$ | async) || editEntityForm.invalid || !editEntityForm.dirty\">\n            Save\n        </button>\n    </div>\n</form>",
                "customCss" : "/*=======================================================================*/\n/*==========  There are two examples: for edit and add entity  ==========*/\n/*=======================================================================*/\n/*========================  Edit entity example  ========================*/\n/*=======================================================================*/\n/*\n.edit-entity-form .boolean-value-input {\n    padding-left: 5px;\n}\n\n.edit-entity-form .boolean-value-input .checkbox-label {\n    margin-bottom: 8px;\n    color: rgba(0,0,0,0.54);\n    font-size: 12px;\n}\n\n.relations-list .header {\n    padding-right: 5px;\n    padding-bottom: 5px;\n    padding-left: 5px;\n}\n\n.relations-list .header .cell {\n    padding-right: 5px;\n    padding-left: 5px;\n    font-size: 12px;\n    font-weight: 700;\n    color: rgba(0, 0, 0, .54);\n    white-space: nowrap;\n}\n\n.relations-list .mat-form-field-infix {\n    width: auto !important;\n}\n\n.relations-list .body {\n    padding-right: 5px;\n    padding-bottom: 15px;\n    padding-left: 5px;\n}\n\n.relations-list .body .row {\n    padding-top: 5px;\n}\n\n.relations-list .body .cell {\n    padding-right: 5px;\n    padding-left: 5px;\n}\n\n.relations-list .body .md-button {\n    margin: 0;\n}\n*/\n/*========================================================================*/\n/*=========================  Add entity example  =========================*/\n/*========================================================================*/\n/*\n.add-entity-form .boolean-value-input {\n    padding-left: 5px;\n}\n\n.add-entity-form .boolean-value-input .checkbox-label {\n    margin-bottom: 8px;\n    color: rgba(0,0,0,0.54);\n    font-size: 12px;\n}\n\n.relations-list .header {\n    padding-right: 5px;\n    padding-bottom: 5px;\n    padding-left: 5px;\n}\n\n.relations-list .header .cell {\n    padding-right: 5px;\n    padding-left: 5px;\n    font-size: 12px;\n    font-weight: 700;\n    color: rgba(0, 0, 0, .54);\n    white-space: nowrap;\n}\n\n.relations-list .mat-form-field-infix {\n    width: auto !important;\n}\n\n.relations-list .body {\n    padding-right: 5px;\n    padding-bottom: 15px;\n    padding-left: 5px;\n}\n\n.relations-list .body .row {\n    padding-top: 5px;\n}\n\n.relations-list .body .cell {\n    padding-right: 5px;\n    padding-left: 5px;\n}\n\n.relations-list .body .md-button {\n    margin: 0;\n}\n*/\n",
                "customFunction" : "let $injector = widgetContext.$scope.$injector;\nlet customDialog = $injector.get(widgetContext.servicesMap.get('customDialog'));\nlet entityService = $injector.get(widgetContext.servicesMap.get('entityService'));\nlet deviceService = $injector.get(widgetContext.servicesMap.get('deviceService'));\nlet attributeService = $injector.get(widgetContext.servicesMap.get('attributeService'));\n\nopenEditEntityDialog();\n\nfunction openEditEntityDialog() {\n    customDialog.customDialog(htmlTemplate, EditEntityDialogController).subscribe();\n}\n\nfunction EditEntityDialogController(instance) {\n    let vm = instance;\n    \n    const NULL_UUID = '13814000-1dd2-11b2-8080-808080808080';\n\n    vm.entityName = entityName;\n    vm.attributes = {};\n    vm.entity = {};\n    vm.isTenant = widgetContext.currentUser.authority == 'TENANT_ADMIN';\n\n    vm.editEntityFormGroup = vm.fb.group({\n        entityName: ['', [vm.validators.required]],\n        entityLabel: [null],\n        attributes: vm.fb.group({\n            latitude: [null],\n            longitude: [null]\n        }),\n        customerId: [null]\n    });\n\n    getEntityInfo();\n\n    vm.cancel = function() {\n        vm.dialogRef.close(null);\n    };\n\n    vm.save = function() {\n        widgetContext.rxjs.forkJoin([\n            saveAttributes(entityId),\n            saveEntity()\n        ]).subscribe(\n            function () {\n                widgetContext.updateAliases();\n                vm.dialogRef.close(null);\n            }\n        );\n    };\n\n    function getEntityAttributes(attributes) {\n        for (var i = 0; i < attributes.length; i++) {\n            vm.attributes[attributes[i].key] = attributes[i].value;\n        }\n    }\n\n    function getEntityInfo() {\n        widgetContext.rxjs.forkJoin([\n            attributeService.getEntityAttributes(entityId, 'SERVER_SCOPE'),\n            entityService.getEntity(entityId.entityType, entityId.id)\n        ]).subscribe(\n            function (data) {\n                getEntityAttributes(data[0]);\n                vm.entity = data[1];\n                vm.editEntityFormGroup.patchValue({\n                    entityName: vm.entity.name,\n                    entityLabel: vm.entity.label,\n                    attributes: vm.attributes,\n                    customerId: vm.entity.customerId.id !== NULL_UUID ? vm.entity.customerId.id : null  \n                }, {emitEvent: false});\n            }\n        );\n    }\n\n    function saveEntity() {\n        const formValues = vm.editEntityFormGroup.value;\n        \n        let customerId;\n        if (formValues.customerId === null) {\n            customerId = {\n                id: NULL_UUID,\n                entityType: \"CUSTOMER\"\n            };\n        } else {\n            customerId = {\n                id: formValues.customerId,\n                entityType: \"CUSTOMER\"\n            };\n        }\n        \n        if (vm.entity.label !== formValues.entityLabel ||\n            vm.entity.customerId.id !== customerId.id){\n            vm.entity.label = formValues.entityLabel;\n            vm.entity.customerId = customerId;\n            return deviceService.saveDevice(vm.entity);\n        }\n        return widgetContext.rxjs.of([]);\n    }\n\n    function saveAttributes(entityId) {\n        let attributes = vm.editEntityFormGroup.get('attributes').value;\n        let attributesArray = [];\n        for (let key in attributes) {\n            if (attributes[key] !== vm.attributes[key]) {\n                attributesArray.push({key: key, value: attributes[key]});\n            }\n        }\n        if (attributesArray.length > 0) {\n            return attributeService.saveEntityAttributes(entityId, \"SERVER_SCOPE\", attributesArray);\n        }\n        return widgetContext.rxjs.of([]);\n    }\n}\n",
                "customResources" : [ ],
                "id" : "13c6a062-4872-563d-d8ca-4ddb194142f5"
              }, {
                "name" : "Delete sensor",
                "icon" : "delete",
                "useShowWidgetActionFunction" : false,
                "showWidgetActionFunction" : "return true;",
                "type" : "customPretty",
                "customHtml" : "<!--=======================================================================-->\n<!--=====  There are two example templates: for edit and add entity   =====-->\n<!--=======================================================================-->\n<!--========================  Edit entity example  ========================-->\n<!--=======================================================================-->\n<!-- -->\n<!--<form #editEntityForm=\"ngForm\" [formGroup]=\"editEntityFormGroup\"-->\n<!--      (ngSubmit)=\"save()\"  class=\"edit-entity-form\">-->\n<!--    <mat-toolbar fxLayout=\"row\" color=\"primary\">-->\n<!--        <h2>Edit {{entityType.toLowerCase()}} {{entityName}}</h2>-->\n<!--        <span fxFlex></span>-->\n<!--        <button mat-icon-button (click)=\"cancel()\" type=\"button\">-->\n<!--            <mat-icon class=\"material-icons\">close</mat-icon>-->\n<!--        </button>-->\n<!--    </mat-toolbar>-->\n<!--    <mat-progress-bar color=\"warn\" mode=\"indeterminate\" *ngIf=\"isLoading$ | async\">-->\n<!--    </mat-progress-bar>-->\n<!--    <div style=\"height: 4px;\" *ngIf=\"!(isLoading$ | async)\"></div>-->\n<!--    <div mat-dialog-content fxLayout=\"column\">-->\n<!--        <div fxLayout=\"row\" fxLayoutGap=\"8px\" fxLayout.xs=\"column\"  fxLayoutGap.xs=\"0\">-->\n<!--            <mat-form-field fxFlex class=\"mat-block\">-->\n<!--                <mat-label>Entity Name</mat-label>-->\n<!--                <input matInput formControlName=\"entityName\" required readonly=\"\">-->\n<!--            </mat-form-field>-->\n<!--            <mat-form-field fxFlex class=\"mat-block\">-->\n<!--                <mat-label>Entity Label</mat-label>-->\n<!--                <input matInput formControlName=\"entityLabel\">-->\n<!--            </mat-form-field>-->\n<!--        </div>-->\n<!--        <div fxLayout=\"row\" fxLayoutGap=\"8px\" fxLayout.xs=\"column\"  fxLayoutGap.xs=\"0\">-->\n<!--            <mat-form-field fxFlex class=\"mat-block\">-->\n<!--                <mat-label>Entity Type</mat-label>-->\n<!--                <input matInput formControlName=\"entityType\" readonly>-->\n<!--            </mat-form-field>-->\n<!--            <mat-form-field fxFlex class=\"mat-block\">-->\n<!--                <mat-label>Type</mat-label>-->\n<!--                <input matInput formControlName=\"type\" readonly>-->\n<!--            </mat-form-field>-->\n<!--        </div>-->\n<!--        <div formGroupName=\"attributes\" fxLayout=\"column\">-->\n<!--            <div fxLayout=\"row\" fxLayoutGap=\"8px\" fxLayout.xs=\"column\"  fxLayoutGap.xs=\"0\">-->\n<!--                <mat-form-field fxFlex class=\"mat-block\">-->\n<!--                    <mat-label>Latitude</mat-label>-->\n<!--                    <input type=\"number\" step=\"any\" matInput formControlName=\"latitude\">-->\n<!--                </mat-form-field>-->\n<!--                <mat-form-field fxFlex class=\"mat-block\">-->\n<!--                    <mat-label>Longitude</mat-label>-->\n<!--                    <input type=\"number\" step=\"any\" matInput formControlName=\"longitude\">-->\n<!--                </mat-form-field>-->\n<!--            </div>-->\n<!--            <div fxLayout=\"row\" fxLayoutGap=\"8px\" fxLayout.xs=\"column\"  fxLayoutGap.xs=\"0\">-->\n<!--                <mat-form-field fxFlex class=\"mat-block\">-->\n<!--                    <mat-label>Address</mat-label>-->\n<!--                    <input matInput formControlName=\"address\">-->\n<!--                </mat-form-field>-->\n<!--                <mat-form-field fxFlex class=\"mat-block\">-->\n<!--                    <mat-label>Owner</mat-label>-->\n<!--                    <input matInput formControlName=\"owner\">-->\n<!--                </mat-form-field>-->\n<!--            </div>-->\n<!--            <div fxLayout=\"row\" fxLayoutGap=\"8px\" fxLayout.xs=\"column\"  fxLayoutGap.xs=\"0\">-->\n<!--                <mat-form-field fxFlex class=\"mat-block\">-->\n<!--                    <mat-label>Integer Value</mat-label>-->\n<!--                    <input type=\"number\" step=\"1\" matInput formControlName=\"number\">-->\n<!--                    <mat-error *ngIf=\"editEntityFormGroup.get('attributes.number').hasError('pattern')\">-->\n<!--                        Invalid integer value.-->\n<!--                    </mat-error>-->\n<!--                </mat-form-field>-->\n<!--                <div class=\"boolean-value-input\" fxLayout=\"column\" fxLayoutAlign=\"center start\" fxFlex>-->\n<!--                    <label class=\"checkbox-label\">Boolean Value</label>-->\n<!--                    <mat-checkbox formControlName=\"booleanValue\" style=\"margin-bottom: 40px;\">-->\n<!--                        {{ (editEntityFormGroup.get('attributes.booleanValue').value ? \"value.true\" : \"value.false\") | translate }}-->\n<!--                    </mat-checkbox>-->\n<!--                </div>-->\n<!--            </div>-->\n<!--        </div>-->\n<!--        <div class=\"relations-list old-relations\">-->\n<!--            <div class=\"mat-body-1\" style=\"padding-bottom: 10px; color: rgba(0,0,0,0.57);\">Relations</div>-->\n<!--            <div class=\"body\" [fxShow]=\"oldRelations().length\">-->\n<!--                <div class=\"row\" fxLayout=\"row\" fxLayoutAlign=\"start center\" formArrayName=\"oldRelations\" -->\n<!--                     *ngFor=\"let relation of oldRelations().controls; let i = index;\">-->\n<!--                    <div [formGroupName]=\"i\" class=\"mat-elevation-z2\" fxFlex fxLayout=\"row\" style=\"padding: 5px 0 5px 5px;\">-->\n<!--                        <div fxFlex fxLayout=\"column\">-->\n<!--                            <div fxLayout=\"row\" fxLayoutGap=\"8px\" fxLayout.xs=\"column\"  fxLayoutGap.xs=\"0\">-->\n<!--                                <mat-form-field class=\"mat-block\" style=\"min-width: 100px;\">-->\n<!--                                    <mat-label>Direction</mat-label>-->\n<!--                                    <mat-select formControlName=\"direction\" name=\"direction\">-->\n<!--                                        <mat-option *ngFor=\"let direction of entitySearchDirection | keyvalue\" [value]=\"direction.value\">-->\n<!--                                            {{ (\"relation.search-direction.\" + direction.value) | translate}}-->\n<!--                                        </mat-option>-->\n<!--                                    </mat-select>-->\n<!--                                    <mat-error *ngIf=\"relation.get('direction').hasError('required')\">-->\n<!--                                        Relation direction is required.-->\n<!--                                    </mat-error>-->\n<!--                                </mat-form-field>-->\n<!--                                <tb-relation-type-autocomplete-->\n<!--                                        fxFlex class=\"mat-block\"-->\n<!--                                        formControlName=\"relationType\"-->\n<!--                                        required=\"true\">-->\n<!--                                </tb-relation-type-autocomplete>-->\n<!--                            </div>-->\n<!--                            <div fxLayout=\"row\" fxLayout.xs=\"column\">-->\n<!--                                <tb-entity-select-->\n<!--                                        fxFlex class=\"mat-block\"-->\n<!--                                        required=\"true\"-->\n<!--                                        formControlName=\"relatedEntity\">-->\n<!--                                </tb-entity-select>-->\n<!--                            </div>-->\n<!--                        </div>-->\n<!--                        <div fxLayout=\"column\" fxLayoutAlign=\"center center\">-->\n<!--                            <button mat-icon-button color=\"primary\"-->\n<!--                                    aria-label=\"Remove\"-->\n<!--                                    type=\"button\"-->\n<!--                                    (click)=\"removeOldRelation(i)\"-->\n<!--                                    matTooltip=\"Remove relation\"-->\n<!--                                    matTooltipPosition=\"above\">-->\n<!--                                <mat-icon>close</mat-icon>-->\n<!--                            </button>-->\n<!--                        </div>-->\n<!--                    </div>-->\n<!--                </div>-->\n<!--            </div>-->\n<!--        </div>-->\n<!--        <div class=\"relations-list\">-->\n<!--            <div class=\"mat-body-1\" style=\"padding-bottom: 10px; color: rgba(0,0,0,0.57);\">New Relations</div>-->\n<!--            <div class=\"body\" [fxShow]=\"relations().length\">-->\n<!--                <div class=\"row\" fxLayout=\"row\" fxLayoutAlign=\"start center\" formArrayName=\"relations\" *ngFor=\"let relation of relations().controls; let i = index;\">-->\n<!--                    <div [formGroupName]=\"i\" class=\"mat-elevation-z2\" fxFlex fxLayout=\"row\" style=\"padding: 5px 0 5px 5px;\">-->\n<!--                        <div fxFlex fxLayout=\"column\">-->\n<!--                            <div fxLayout=\"row\" fxLayoutGap=\"8px\" fxLayout.xs=\"column\"  fxLayoutGap.xs=\"0\">-->\n<!--                                <mat-form-field class=\"mat-block\" style=\"min-width: 100px;\">-->\n<!--                                    <mat-label>Direction</mat-label>-->\n<!--                                    <mat-select formControlName=\"direction\" name=\"direction\">-->\n<!--                                        <mat-option *ngFor=\"let direction of entitySearchDirection | keyvalue\" [value]=\"direction.value\">-->\n<!--                                            {{ (\"relation.search-direction.\" + direction.value) | translate}}-->\n<!--                                        </mat-option>-->\n<!--                                    </mat-select>-->\n<!--                                    <mat-error *ngIf=\"relation.get('direction').hasError('required')\">-->\n<!--                                        Relation direction is required.-->\n<!--                                    </mat-error>-->\n<!--                                </mat-form-field>-->\n<!--                                <tb-relation-type-autocomplete-->\n<!--                                        fxFlex class=\"mat-block\"-->\n<!--                                        formControlName=\"relationType\"-->\n<!--                                        [required]=\"true\">-->\n<!--                                </tb-relation-type-autocomplete>-->\n<!--                            </div>-->\n<!--                            <div fxLayout=\"row\" fxLayout.xs=\"column\">-->\n<!--                                <tb-entity-select-->\n<!--                                        fxFlex class=\"mat-block\"-->\n<!--                                        [required]=\"true\"-->\n<!--                                        formControlName=\"relatedEntity\">-->\n<!--                                </tb-entity-select>-->\n<!--                            </div>-->\n<!--                        </div>-->\n<!--                        <div fxLayout=\"column\" fxLayoutAlign=\"center center\">-->\n<!--                            <button mat-icon-button color=\"primary\"-->\n<!--                                    aria-label=\"Remove\"-->\n<!--                                    type=\"button\"-->\n<!--                                    (click)=\"removeRelation(i)\"-->\n<!--                                    matTooltip=\"Remove relation\"-->\n<!--                                    matTooltipPosition=\"above\">-->\n<!--                                <mat-icon>close</mat-icon>-->\n<!--                            </button>-->\n<!--                        </div>-->\n<!--                    </div>-->\n<!--                </div>-->\n<!--            </div>-->\n<!--            <div>-->\n<!--                <button mat-raised-button color=\"primary\"-->\n<!--                        type=\"button\"-->\n<!--                        (click)=\"addRelation()\"-->\n<!--                        matTooltip=\"Add Relation\"-->\n<!--                        matTooltipPosition=\"above\">-->\n<!--                    Add-->\n<!--                </button>-->\n<!--            </div>-->\n<!--        </div>-->\n<!--    </div>-->\n<!--    <div mat-dialog-actions fxLayout=\"row\" fxLayoutAlign=\"end center\">-->\n<!--        <button mat-button color=\"primary\"-->\n<!--                type=\"button\"-->\n<!--                [disabled]=\"(isLoading$ | async)\"-->\n<!--                (click)=\"cancel()\" cdkFocusInitial>-->\n<!--            Cancel-->\n<!--        </button>-->\n<!--        <button mat-button mat-raised-button color=\"primary\"-->\n<!--                type=\"submit\"-->\n<!--                [disabled]=\"(isLoading$ | async) || editEntityForm.invalid || !editEntityForm.dirty\">-->\n<!--            Save-->\n<!--        </button>-->\n<!--    </div>-->\n<!--</form>-->\n<!---->\n<!--========================================================================-->\n<!--=========================  Add entity example  =========================-->\n<!--========================================================================-->\n<!---->\n<!--<form #addEntityForm=\"ngForm\" [formGroup]=\"addEntityFormGroup\"-->\n<!--      (ngSubmit)=\"save()\" class=\"add-entity-form\">-->\n<!--    <mat-toolbar fxLayout=\"row\" color=\"primary\">-->\n<!--        <h2>Add entity</h2>-->\n<!--        <span fxFlex></span>-->\n<!--        <button mat-icon-button (click)=\"cancel()\" type=\"button\">-->\n<!--            <mat-icon class=\"material-icons\">close</mat-icon>-->\n<!--        </button>-->\n<!--    </mat-toolbar>-->\n<!--    <mat-progress-bar color=\"warn\" mode=\"indeterminate\" *ngIf=\"isLoading$ | async\">-->\n<!--    </mat-progress-bar>-->\n<!--    <div style=\"height: 4px;\" *ngIf=\"!(isLoading$ | async)\"></div>-->\n<!--    <div mat-dialog-content fxLayout=\"column\">-->\n<!--        <div fxLayout=\"row\" fxLayoutGap=\"8px\" fxLayout.xs=\"column\"  fxLayoutGap.xs=\"0\">-->\n<!--            <mat-form-field fxFlex class=\"mat-block\">-->\n<!--                <mat-label>Entity Name</mat-label>-->\n<!--                <input matInput formControlName=\"entityName\" required>-->\n<!--                <mat-error *ngIf=\"addEntityFormGroup.get('entityName').hasError('required')\">-->\n<!--                    Entity name is required.-->\n<!--                </mat-error>-->\n<!--            </mat-form-field>-->\n<!--            <mat-form-field fxFlex class=\"mat-block\">-->\n<!--                <mat-label>Entity Label</mat-label>-->\n<!--                <input matInput formControlName=\"entityLabel\" >-->\n<!--            </mat-form-field>-->\n<!--        </div>-->\n<!--        <div fxLayout=\"row\" fxLayoutGap=\"8px\" fxLayout.xs=\"column\"  fxLayoutGap.xs=\"0\">-->\n<!--            <tb-entity-type-select-->\n<!--                    class=\"mat-block\"-->\n<!--                    formControlName=\"entityType\"-->\n<!--                    [showLabel]=\"true\"-->\n<!--                    [allowedEntityTypes]=\"allowedEntityTypes\"-->\n<!--            ></tb-entity-type-select>-->\n<!--            <tb-entity-subtype-autocomplete-->\n<!--                    fxFlex *ngIf=\"addEntityFormGroup.get('entityType').value == 'ASSET'\"-->\n<!--                    class=\"mat-block\"-->\n<!--                    formControlName=\"type\"-->\n<!--                    [required]=\"true\"-->\n<!--                    [entityType]=\"'ASSET'\"-->\n<!--            ></tb-entity-subtype-autocomplete>-->\n<!--            <tb-entity-subtype-autocomplete-->\n<!--                    fxFlex *ngIf=\"addEntityFormGroup.get('entityType').value != 'ASSET'\"-->\n<!--                    class=\"mat-block\"-->\n<!--                    formControlName=\"type\"-->\n<!--                    [required]=\"true\"-->\n<!--                    [entityType]=\"'DEVICE'\"-->\n<!--            ></tb-entity-subtype-autocomplete>-->\n<!--        </div>-->\n<!--        <div formGroupName=\"attributes\" fxLayout=\"column\">-->\n<!--            <div fxLayout=\"row\" fxLayoutGap=\"8px\" fxLayout.xs=\"column\"  fxLayoutGap.xs=\"0\">-->\n<!--                <mat-form-field fxFlex class=\"mat-block\">-->\n<!--                    <mat-label>Latitude</mat-label>-->\n<!--                    <input type=\"number\" step=\"any\" matInput formControlName=\"latitude\">-->\n<!--                </mat-form-field>-->\n<!--                <mat-form-field fxFlex class=\"mat-block\">-->\n<!--                    <mat-label>Longitude</mat-label>-->\n<!--                    <input type=\"number\" step=\"any\" matInput formControlName=\"longitude\">-->\n<!--                </mat-form-field>-->\n<!--            </div>-->\n<!--            <div fxLayout=\"row\" fxLayoutGap=\"8px\" fxLayout.xs=\"column\"  fxLayoutGap.xs=\"0\">-->\n<!--                <mat-form-field fxFlex class=\"mat-block\">-->\n<!--                    <mat-label>Address</mat-label>-->\n<!--                    <input matInput formControlName=\"address\">-->\n<!--                </mat-form-field>-->\n<!--                <mat-form-field fxFlex class=\"mat-block\">-->\n<!--                    <mat-label>Owner</mat-label>-->\n<!--                    <input matInput formControlName=\"owner\">-->\n<!--                </mat-form-field>-->\n<!--            </div>-->\n<!--            <div fxLayout=\"row\" fxLayoutGap=\"8px\" fxLayout.xs=\"column\"  fxLayoutGap.xs=\"0\">-->\n<!--                <mat-form-field fxFlex class=\"mat-block\">-->\n<!--                    <mat-label>Integer Value</mat-label>-->\n<!--                    <input type=\"number\" step=\"1\" matInput formControlName=\"number\">-->\n<!--                    <mat-error *ngIf=\"addEntityFormGroup.get('attributes.number').hasError('pattern')\">-->\n<!--                        Invalid integer value.-->\n<!--                    </mat-error>-->\n<!--                </mat-form-field>-->\n<!--                <div class=\"boolean-value-input\" fxLayout=\"column\" fxLayoutAlign=\"center start\" fxFlex>-->\n<!--                    <label class=\"checkbox-label\">Boolean Value</label>-->\n<!--                    <mat-checkbox formControlName=\"booleanValue\" style=\"margin-bottom: 40px;\">-->\n<!--                        {{ (addEntityFormGroup.get('attributes.booleanValue').value ? \"value.true\" : \"value.false\") | translate }}-->\n<!--                    </mat-checkbox>-->\n<!--                </div>-->\n<!--            </div>-->\n<!--        </div>-->\n<!--        <div class=\"relations-list\">-->\n<!--            <div class=\"mat-body-1\" style=\"padding-bottom: 10px; color: rgba(0,0,0,0.57);\">Relations</div>-->\n<!--            <div class=\"body\" [fxShow]=\"relations().length\">-->\n<!--                <div class=\"row\" fxLayout=\"row\" fxLayoutAlign=\"start center\" formArrayName=\"relations\" *ngFor=\"let relation of relations().controls; let i = index;\">-->\n<!--                    <div [formGroupName]=\"i\" class=\"mat-elevation-z2\" fxFlex fxLayout=\"row\" style=\"padding: 5px 0 5px 5px;\">-->\n<!--                        <div fxFlex fxLayout=\"column\">-->\n<!--                            <div fxLayout=\"row\" fxLayoutGap=\"8px\" fxLayout.xs=\"column\"  fxLayoutGap.xs=\"0\">-->\n<!--                                <mat-form-field class=\"mat-block\" style=\"min-width: 100px;\">-->\n<!--                                    <mat-label>Direction</mat-label>-->\n<!--                                    <mat-select formControlName=\"direction\" name=\"direction\">-->\n<!--                                        <mat-option *ngFor=\"let direction of entitySearchDirection | keyvalue\" [value]=\"direction.value\">-->\n<!--                                            {{ (\"relation.search-direction.\" + direction.value) | translate}}-->\n<!--                                        </mat-option>-->\n<!--                                    </mat-select>-->\n<!--                                    <mat-error *ngIf=\"relation.get('direction').hasError('required')\">-->\n<!--                                        Relation direction is required.-->\n<!--                                    </mat-error>-->\n<!--                                </mat-form-field>-->\n<!--                                <tb-relation-type-autocomplete-->\n<!--                                        fxFlex class=\"mat-block\"-->\n<!--                                        formControlName=\"relationType\"-->\n<!--                                        [required]=\"true\">-->\n<!--                                </tb-relation-type-autocomplete>-->\n<!--                            </div>-->\n<!--                            <div fxLayout=\"row\" fxLayout.xs=\"column\">-->\n<!--                                <tb-entity-select-->\n<!--                                        fxFlex class=\"mat-block\"-->\n<!--                                        [required]=\"true\"-->\n<!--                                        formControlName=\"relatedEntity\">-->\n<!--                                </tb-entity-select>-->\n<!--                            </div>-->\n<!--                        </div>-->\n<!--                        <div fxLayout=\"column\" fxLayoutAlign=\"center center\">-->\n<!--                            <button mat-icon-button color=\"primary\"-->\n<!--                                    aria-label=\"Remove\"-->\n<!--                                    type=\"button\"-->\n<!--                                    (click)=\"removeRelation(i)\"-->\n<!--                                    matTooltip=\"Remove relation\"-->\n<!--                                    matTooltipPosition=\"above\">-->\n<!--                                <mat-icon>close</mat-icon>-->\n<!--                            </button>-->\n<!--                        </div>-->\n<!--                    </div>-->\n<!--                </div>-->\n<!--            </div>-->\n<!--            <div>-->\n<!--                <button mat-raised-button color=\"primary\"-->\n<!--                        type=\"button\"-->\n<!--                        (click)=\"addRelation()\"-->\n<!--                        matTooltip=\"Add Relation\"-->\n<!--                        matTooltipPosition=\"above\">-->\n<!--                    Add-->\n<!--                </button>-->\n<!--            </div>-->\n<!--        </div>-->\n<!--    </div>-->\n<!--    <div mat-dialog-actions fxLayout=\"row\" fxLayoutAlign=\"end center\">-->\n<!--        <button mat-button color=\"primary\"-->\n<!--                type=\"button\"-->\n<!--                [disabled]=\"(isLoading$ | async)\"-->\n<!--                (click)=\"cancel()\" cdkFocusInitial>-->\n<!--            Cancel-->\n<!--        </button>-->\n<!--        <button mat-button mat-raised-button color=\"primary\"-->\n<!--                type=\"submit\"-->\n<!--                [disabled]=\"(isLoading$ | async) || addEntityForm.invalid || !addEntityForm.dirty\">-->\n<!--            Create-->\n<!--        </button>-->\n<!--    </div>-->\n<!--</form>-->\n",
                "customCss" : "/*=======================================================================*/\n/*==========  There are two examples: for edit and add entity  ==========*/\n/*=======================================================================*/\n/*========================  Edit entity example  ========================*/\n/*=======================================================================*/\n/*\n.edit-entity-form .boolean-value-input {\n    padding-left: 5px;\n}\n\n.edit-entity-form .boolean-value-input .checkbox-label {\n    margin-bottom: 8px;\n    color: rgba(0,0,0,0.54);\n    font-size: 12px;\n}\n\n.relations-list .header {\n    padding-right: 5px;\n    padding-bottom: 5px;\n    padding-left: 5px;\n}\n\n.relations-list .header .cell {\n    padding-right: 5px;\n    padding-left: 5px;\n    font-size: 12px;\n    font-weight: 700;\n    color: rgba(0, 0, 0, .54);\n    white-space: nowrap;\n}\n\n.relations-list .mat-form-field-infix {\n    width: auto !important;\n}\n\n.relations-list .body {\n    padding-right: 5px;\n    padding-bottom: 15px;\n    padding-left: 5px;\n}\n\n.relations-list .body .row {\n    padding-top: 5px;\n}\n\n.relations-list .body .cell {\n    padding-right: 5px;\n    padding-left: 5px;\n}\n\n.relations-list .body .md-button {\n    margin: 0;\n}\n*/\n/*========================================================================*/\n/*=========================  Add entity example  =========================*/\n/*========================================================================*/\n/*\n.add-entity-form .boolean-value-input {\n    padding-left: 5px;\n}\n\n.add-entity-form .boolean-value-input .checkbox-label {\n    margin-bottom: 8px;\n    color: rgba(0,0,0,0.54);\n    font-size: 12px;\n}\n\n.relations-list .header {\n    padding-right: 5px;\n    padding-bottom: 5px;\n    padding-left: 5px;\n}\n\n.relations-list .header .cell {\n    padding-right: 5px;\n    padding-left: 5px;\n    font-size: 12px;\n    font-weight: 700;\n    color: rgba(0, 0, 0, .54);\n    white-space: nowrap;\n}\n\n.relations-list .mat-form-field-infix {\n    width: auto !important;\n}\n\n.relations-list .body {\n    padding-right: 5px;\n    padding-bottom: 15px;\n    padding-left: 5px;\n}\n\n.relations-list .body .row {\n    padding-top: 5px;\n}\n\n.relations-list .body .cell {\n    padding-right: 5px;\n    padding-left: 5px;\n}\n\n.relations-list .body .md-button {\n    margin: 0;\n}\n*/\n",
                "customFunction" : "let $injector = widgetContext.$scope.$injector;\nlet dialogs = $injector.get(widgetContext.servicesMap.get('dialogs'));\nlet deviceService = $injector.get(widgetContext.servicesMap.get('deviceService'));\nlet userAuthority = widgetContext.currentUser.authority;\n\nopenDeleteEntityDialog();\n\nfunction openDeleteEntityDialog() {\n    let title = 'Delete sensor \"' +  entityName + '\"';\n    let content = 'Are you sure you want to delete the sensor \"' + entityName + '\"?';\n    dialogs.confirm(title, content, 'Cancel', 'Delete').subscribe(\n        function(result) {\n            if (result) {\n                deleteEntity();\n            }\n        }\n    );\n}\n\nfunction deleteEntity() {\n    if (userAuthority === 'CUSTOMER_USER') {\n        deviceService.unclaimDevice(entityName, {ignoreErrors: true}).subscribe(\n            function success() {\n                widgetContext.showSuccessToast('Device \\'' + entityName + '\\' successfully deleted!');\n                widgetContext.updateAliases();\n            },\n            function fail(error) {\n                if (error.error && error.error.message) {\n                    showDialog('Failed to delete device', error.error.message);\n                } else {\n                    widgetContext.showErrorToast('Failed to delete device');\n                }\n            }\n        ); \n    } else {\n        deviceService.deleteDevice(entityId.id, {ignoreErrors: true}).subscribe(\n            function success() {\n                widgetContext.showSuccessToast('Device \\'' + entityName + '\\' successfully deleted!');\n                widgetContext.updateAliases();\n            },\n            function fail() {\n                showErrorDialog();\n            }\n        );\n    }\n}\n\nfunction showDialog(title, error) {\n    setTimeout(function() {\n        widgetContext.dialogs.alert(title, error).subscribe();\n    }, 100);\n}\n\nfunction showErrorDialog() {\n    let title = 'Error';\n    let content = 'An error occurred while deleting the thermostat. Please try again.';\n    dialogs.alert(title, content, 'CLOSE').subscribe(\n        function(result) {}\n    );\n}",
                "customResources" : [ ],
                "id" : "62bd8e1f-2958-3fe1-a6f7-204778988b6e"
              } ],
              "rowClick" : [ {
                "name" : "Sensor details",
                "icon" : "more_horiz",
                "type" : "openDashboardState",
                "targetDashboardStateId" : "chart",
                "setEntityId" : true,
                "stateEntityParamName" : null,
                "openInSeparateDialog" : false,
                "dialogTitle" : "",
                "dialogHideDashboardToolbar" : true,
                "dialogWidth" : null,
                "dialogHeight" : null,
                "openRightLayout" : false,
                "id" : "982891b7-c329-0162-fc9c-ad9d920547e1"
              } ]
            },
            "enableDataExport" : true
          },
          "id" : "f33c746c-0dfc-c212-395b-b448c8a17209",
          "typeFullFqn" : "system.cards.entities_table"
        },
        "7943196b-eedb-d422-f9c3-b32d379ad172" : {
          "type" : "alarm",
          "sizeX" : 13,
          "sizeY" : 5,
          "config" : {
            "timewindow" : {
              "hideInterval" : false,
              "hideAggregation" : false,
              "hideAggInterval" : false,
              "hideTimezone" : false,
              "selectedTab" : 0,
              "realtime" : {
                "realtimeType" : 0,
                "timewindowMs" : 2592000000,
                "quickInterval" : "CURRENT_DAY",
                "interval" : 1000
              },
              "aggregation" : {
                "type" : "NONE",
                "limit" : 200
              }
            },
            "showTitle" : true,
            "backgroundColor" : "rgb(255, 255, 255)",
            "color" : "rgba(0, 0, 0, 0.87)",
            "padding" : "4px",
            "settings" : {
              "enableSelection" : true,
              "enableSearch" : true,
              "displayDetails" : false,
              "allowAcknowledgment" : true,
              "allowClear" : true,
              "displayPagination" : true,
              "defaultPageSize" : 10,
              "defaultSortOrder" : "-createdTime",
              "enableSelectColumnDisplay" : false,
              "alarmsTitle" : "Alarms",
              "enableFilter" : true,
              "enableStickyHeader" : true
            },
            "title" : "New Alarms table",
            "dropShadow" : false,
            "enableFullscreen" : false,
            "titleStyle" : {
              "fontSize" : "16px",
              "fontWeight" : 400,
              "padding" : "5px 10px 5px 10px"
            },
            "useDashboardTimewindow" : false,
            "showLegend" : false,
            "alarmSource" : {
              "type" : "entity",
              "name" : "alarms",
              "entityAliasId" : "68a058e1-fdda-8482-715b-3ae4a488568e",
              "filterId" : null,
              "dataKeys" : [ {
                "name" : "createdTime",
                "type" : "alarm",
                "label" : "Created time",
                "color" : "#2196f3",
                "settings" : { },
                "_hash" : 0.7308410188824108
              }, {
                "name" : "originator",
                "type" : "alarm",
                "label" : "Originator",
                "color" : "#4caf50",
                "settings" : { },
                "_hash" : 0.056085530105439485
              }, {
                "name" : "type",
                "type" : "alarm",
                "label" : "Type",
                "color" : "#f44336",
                "settings" : {
                  "columnWidth" : "80px",
                  "defaultColumnVisibility" : "visible",
                  "columnSelectionToDisplay" : "enabled"
                },
                "_hash" : 0.10212012352561795,
                "units" : null,
                "decimals" : null,
                "funcBody" : null,
                "usePostProcessing" : null,
                "postFuncBody" : null
              }, {
                "name" : "severity",
                "type" : "alarm",
                "label" : "Severity",
                "color" : "#ffc107",
                "settings" : { },
                "_hash" : 0.1777349980531262
              }, {
                "name" : "status",
                "type" : "alarm",
                "label" : "Status",
                "color" : "#607d8b",
                "settings" : { },
                "_hash" : 0.7977920750136249
              } ]
            },
            "alarmsPollingInterval" : 5,
            "showTitleIcon" : false,
            "titleIcon" : null,
            "iconColor" : "rgba(0, 0, 0, 0.87)",
            "iconSize" : "24px",
            "titleTooltip" : "",
            "widgetStyle" : {
              "border-radius" : "8px",
              "box-shadow" : "0px 0px 5px rgba(0, 0, 0, 0.05), 0px 0px 20px -10px rgba(16, 16, 16, 0.35)"
            },
            "displayTimewindow" : true,
            "actions" : { },
            "datasources" : [ ],
            "alarmsMaxCountLoad" : 0,
            "alarmsFetchSize" : 100,
            "alarmFilterConfig" : {
              "statusList" : [ ],
              "severityList" : [ ],
              "typeList" : [ ],
              "searchPropagatedAlarms" : true
            }
          },
          "id" : "7943196b-eedb-d422-f9c3-b32d379ad172",
          "typeFullFqn" : "system.alarm_widgets.alarms_table"
        },
        "3da9a9a1-0b9a-2e1f-0dcb-0ff34a695abb" : {
          "type" : "latest",
          "sizeX" : 13,
          "sizeY" : 6,
          "config" : {
            "datasources" : [ {
              "type" : "entity",
              "name" : null,
              "entityAliasId" : "68a058e1-fdda-8482-715b-3ae4a488568e",
              "filterId" : null,
              "dataKeys" : [ {
                "name" : "active",
                "type" : "attribute",
                "label" : "active",
                "color" : "#607d8b",
                "settings" : { },
                "_hash" : 0.30926987994082844
              }, {
                "name" : "xPos",
                "type" : "attribute",
                "label" : "xPos",
                "color" : "#4caf50",
                "settings" : { },
                "_hash" : 0.6110834618211485
              }, {
                "name" : "yPos",
                "type" : "attribute",
                "label" : "yPos",
                "color" : "#f44336",
                "settings" : { },
                "_hash" : 0.2489853343002537
              }, {
                "name" : "co2",
                "type" : "timeseries",
                "label" : "co2",
                "color" : "#ffc107",
                "settings" : { },
                "_hash" : 0.8535015473029672
              }, {
                "name" : "tvoc",
                "type" : "timeseries",
                "label" : "tvoc",
                "color" : "#607d8b",
                "settings" : { },
                "_hash" : 0.05623109645986113
              } ]
            } ],
            "timewindow" : {
              "displayValue" : "",
              "selectedTab" : 0,
              "realtime" : {
                "realtimeType" : 1,
                "interval" : 1000,
                "timewindowMs" : 60000,
                "quickInterval" : "CURRENT_DAY"
              },
              "history" : {
                "historyType" : 0,
                "interval" : 1000,
                "timewindowMs" : 60000,
                "fixedTimewindow" : {
                  "startTimeMs" : 1694102720479,
                  "endTimeMs" : 1694189120479
                },
                "quickInterval" : "CURRENT_DAY"
              },
              "aggregation" : {
                "type" : "AVG",
                "limit" : 25000
              }
            },
            "showTitle" : false,
            "backgroundColor" : "#fff",
            "color" : "rgba(0, 0, 0, 0.87)",
            "padding" : "8px",
            "settings" : {
              "fitMapBounds" : true,
              "latKeyName" : "latitude",
              "lngKeyName" : "longitude",
              "showLabel" : true,
              "label" : "${entityName}",
              "tooltipPattern" : "<b>${entityName}</b><br/><br/><b>CO₂:</b> ${co2:1} ppm<br/><b>TVOCs:</b> ${tvoc:0} mg/m³<br/><br/><link-act name=\"navigate_to_details\">Sensor details</link-act><br/>",
              "markerImageSize" : 60,
              "useColorFunction" : false,
              "markerImages" : [ ],
              "useMarkerImageFunction" : false,
              "colorFunction" : "\n",
              "color" : "#fe7569",
              "mapProvider" : "OpenStreetMap.HOT",
              "showTooltip" : true,
              "autocloseTooltip" : true,
              "customProviderTileUrl" : "https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png",
              "defaultCenterPosition" : "0,0",
              "showTooltipAction" : "click",
              "polygonKeyName" : "coordinates",
              "polygonOpacity" : 0.5,
              "polygonStrokeOpacity" : 1,
              "polygonStrokeWeight" : 1,
              "zoomOnClick" : true,
              "showCoverageOnHover" : true,
              "animate" : true,
              "maxClusterRadius" : 80,
              "removeOutsideVisibleBounds" : true,
              "useLabelFunction" : true,
              "defaultZoomLevel" : 14,
              "provider" : "image-map",
              "mapPageSize" : 16384,
              "xPosKeyName" : "xPos",
              "yPosKeyName" : "yPos",
              "markerOffsetX" : 0.5,
              "markerOffsetY" : 1,
              "posFunction" : "return {x: origXPos, y: origYPos};",
              "markerImage" : "tb-image;/api/images/tenant/indoor_air_quality_dashboard_widget_sensors_map_marker_image.svg",
              "imageEntityAlias" : "State entity",
              "imageUrlAttribute" : "plan",
              "mapImageUrl" : "tb-image;/api/images/system/label_widget_system_widget_background.svg",
              "labelFunction" : "var color = '#2A7DEC';\nreturn '<div style=\"border-radius: 15px; border: solid #ffffff 2px; background-color: #fff; padding: 3px 0px 3px 0px;\"><span style=\"border: solid ' + color + ' 2px; border-radius: 15px; color: ' + color + '; padding: 4px 12px 4px 12px; font-size: 14px; font-weight: 600;\">' + \n           '${entityLabel}' + \n        '</span></div>';"
            },
            "title" : "Sensors map",
            "dropShadow" : false,
            "enableFullscreen" : false,
            "titleStyle" : {
              "fontSize" : "16px",
              "fontWeight" : 400
            },
            "useDashboardTimewindow" : true,
            "showLegend" : false,
            "widgetStyle" : {
              "border-radius" : "8px",
              "box-shadow" : "0px 0px 5px rgba(0, 0, 0, 0.05), 0px 0px 20px -10px rgba(16, 16, 16, 0.35)"
            },
            "actions" : {
              "headerButton" : [ ],
              "tooltipAction" : [ {
                "id" : "bef25673-b37a-8821-bc0f-5d6dd3680f24",
                "name" : "navigate_to_details",
                "icon" : "more_horiz",
                "type" : "openDashboardState",
                "targetDashboardStateId" : "chart",
                "setEntityId" : true
              } ]
            },
            "showTitleIcon" : false,
            "titleIcon" : null,
            "iconColor" : "rgba(0, 0, 0, 0.87)",
            "iconSize" : "24px",
            "titleTooltip" : "",
            "displayTimewindow" : true,
            "enableDataExport" : false
          },
          "id" : "3da9a9a1-0b9a-2e1f-0dcb-0ff34a695abb",
          "typeFullFqn" : "system.maps_v2.openstreetmap"
        },
        "00fb2742-ba1f-7e43-673f-d6c08b72ed06" : {
          "type" : "latest",
          "sizeX" : 24,
          "sizeY" : 12,
          "config" : {
            "datasources" : [ {
              "type" : "entity",
              "name" : null,
              "entityAliasId" : "68a058e1-fdda-8482-715b-3ae4a488568e",
              "filterId" : null,
              "dataKeys" : [ {
                "name" : "temperature",
                "type" : "timeseries",
                "label" : "temperature",
                "color" : "#f44336",
                "settings" : { },
                "_hash" : 0.5885892766009955,
                "postFuncBody" : "return value || \"\";"
              }, {
                "name" : "humidity",
                "type" : "timeseries",
                "label" : "humidity",
                "color" : "#ffc107",
                "settings" : { },
                "_hash" : 0.21077893588180707,
                "postFuncBody" : "return value || \"\";"
              }, {
                "name" : "active",
                "type" : "attribute",
                "label" : "active",
                "color" : "#607d8b",
                "settings" : { },
                "_hash" : 0.34722983638504346
              }, {
                "name" : "xPos",
                "type" : "attribute",
                "label" : "xPos",
                "color" : "#ffc107",
                "settings" : { },
                "_hash" : 0.1020027371448955
              }, {
                "name" : "yPos",
                "type" : "attribute",
                "label" : "yPos",
                "color" : "#607d8b",
                "settings" : { },
                "_hash" : 0.8318861669435087
              } ]
            } ],
            "timewindow" : {
              "displayValue" : "",
              "selectedTab" : 0,
              "realtime" : {
                "realtimeType" : 1,
                "interval" : 1000,
                "timewindowMs" : 60000,
                "quickInterval" : "CURRENT_DAY"
              },
              "history" : {
                "historyType" : 0,
                "interval" : 1000,
                "timewindowMs" : 60000,
                "fixedTimewindow" : {
                  "startTimeMs" : 1694102720479,
                  "endTimeMs" : 1694189120479
                },
                "quickInterval" : "CURRENT_DAY"
              },
              "aggregation" : {
                "type" : "AVG",
                "limit" : 25000
              }
            },
            "showTitle" : false,
            "backgroundColor" : "#fff",
            "color" : "rgba(0, 0, 0, 0.87)",
            "padding" : "8px",
            "settings" : {
              "fitMapBounds" : true,
              "latKeyName" : "latitude",
              "lngKeyName" : "longitude",
              "showLabel" : true,
              "label" : "${entityName}",
              "tooltipPattern" : "<b>${entityName}</b><br/><br/><b>CO₂:</b> ${co2:1} ppm<br/><b>TVOCs:</b> ${tvoc:0} mg/m³<br/><br/><link-act name=\"navigate_to_details\">Sensor details</link-act><br/>",
              "markerImageSize" : 60,
              "useColorFunction" : false,
              "markerImages" : [ ],
              "useMarkerImageFunction" : false,
              "color" : "#fe7569",
              "mapProvider" : "OpenStreetMap.HOT",
              "showTooltip" : true,
              "autocloseTooltip" : true,
              "defaultCenterPosition" : "0,0",
              "customProviderTileUrl" : "https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png",
              "showTooltipAction" : "click",
              "polygonKeyName" : "coordinates",
              "polygonOpacity" : 0.5,
              "polygonStrokeOpacity" : 1,
              "polygonStrokeWeight" : 1,
              "zoomOnClick" : true,
              "showCoverageOnHover" : true,
              "animate" : true,
              "maxClusterRadius" : 80,
              "removeOutsideVisibleBounds" : true,
              "defaultZoomLevel" : 12,
              "useLabelFunction" : true,
              "provider" : "image-map",
              "draggableMarker" : true,
              "editablePolygon" : true,
              "mapPageSize" : 16384,
              "xPosKeyName" : "xPos",
              "yPosKeyName" : "yPos",
              "markerOffsetX" : 0.5,
              "markerOffsetY" : 1,
              "posFunction" : "return {x: origXPos, y: origYPos};",
              "markerImage" : "tb-image;/api/images/tenant/indoor_air_quality_dashboard_widget_sensors_map_marker_image.svg",
              "imageEntityAlias" : "State entity",
              "imageUrlAttribute" : "plan",
              "mapImageUrl" : "tb-image;/api/images/system/label_widget_system_widget_background.svg",
              "labelFunction" : "var color = '#2A7DEC';\nreturn '<div style=\"border-radius: 15px; border: solid #ffffff 2px; background-color: #fff; padding: 3px 0px 3px 0px;\"><span style=\"border: solid ' + color + ' 2px; border-radius: 15px; color: ' + color + '; padding: 4px 12px 4px 12px; font-size: 14px; font-weight: 600;\">' + \n           '${entityLabel}' + \n        '</span></div>';"
            },
            "title" : "New Markers Placement - OpenStreetMap",
            "dropShadow" : false,
            "enableFullscreen" : false,
            "titleStyle" : {
              "fontSize" : "16px",
              "fontWeight" : 400
            },
            "useDashboardTimewindow" : true,
            "showLegend" : false,
            "widgetStyle" : {
              "border-radius" : "8px",
              "box-shadow" : "0px 0px 5px rgba(0, 0, 0, 0.05), 0px 0px 20px -10px rgba(16, 16, 16, 0.35)"
            },
            "actions" : {
              "tooltipAction" : [ {
                "name" : "delete",
                "icon" : "more_horiz",
                "type" : "custom",
                "customFunction" : "var entityDatasource = widgetContext.mapInstance.datasources.filter(\n    function(entity) {\n        return entity.entityId === entityId.id\n    });\n\nwidgetContext.mapInstance.saveMarkerLocation(entityDatasource[0], null, null).subscribe(function success() {\n        widgetContext.updateAliases();\n});",
                "id" : "54c293c4-9ca6-e34f-dc6a-0271944c1c66"
              } ]
            },
            "showTitleIcon" : false,
            "titleIcon" : null,
            "iconColor" : "rgba(0, 0, 0, 0.87)",
            "iconSize" : "24px",
            "titleTooltip" : "",
            "displayTimewindow" : true,
            "enableDataExport" : false
          },
          "id" : "00fb2742-ba1f-7e43-673f-d6c08b72ed06",
          "typeFullFqn" : "system.input_widgets.markers_placement_openstreetmap"
        },
        "181424bc-7051-1cac-3583-b959bddceca2" : {
          "type" : "latest",
          "sizeX" : 13,
          "sizeY" : 6,
          "config" : {
            "datasources" : [ {
              "type" : "entity",
              "name" : null,
              "entityAliasId" : "12ae98c7-1ea2-52cf-64d5-763e9d993547",
              "filterId" : null,
              "dataKeys" : [ {
                "name" : "active",
                "type" : "attribute",
                "label" : "active",
                "color" : "#607d8b",
                "settings" : { },
                "_hash" : 0.30926987994082844
              }, {
                "name" : "xPos",
                "type" : "attribute",
                "label" : "xPos",
                "color" : "#4caf50",
                "settings" : { },
                "_hash" : 0.6110834618211485
              }, {
                "name" : "yPos",
                "type" : "attribute",
                "label" : "yPos",
                "color" : "#f44336",
                "settings" : { },
                "_hash" : 0.2489853343002537
              }, {
                "name" : "co2",
                "type" : "timeseries",
                "label" : "co2",
                "color" : "#ffc107",
                "settings" : { },
                "_hash" : 0.8535015473029672
              }, {
                "name" : "tvoc",
                "type" : "timeseries",
                "label" : "tvoc",
                "color" : "#607d8b",
                "settings" : { },
                "_hash" : 0.05623109645986113
              } ]
            } ],
            "timewindow" : {
              "displayValue" : "",
              "selectedTab" : 0,
              "realtime" : {
                "realtimeType" : 1,
                "interval" : 1000,
                "timewindowMs" : 60000,
                "quickInterval" : "CURRENT_DAY"
              },
              "history" : {
                "historyType" : 0,
                "interval" : 1000,
                "timewindowMs" : 60000,
                "fixedTimewindow" : {
                  "startTimeMs" : 1694102720479,
                  "endTimeMs" : 1694189120479
                },
                "quickInterval" : "CURRENT_DAY"
              },
              "aggregation" : {
                "type" : "AVG",
                "limit" : 25000
              }
            },
            "showTitle" : false,
            "backgroundColor" : "#fff",
            "color" : "rgba(0, 0, 0, 0.87)",
            "padding" : "8px",
            "settings" : {
              "fitMapBounds" : true,
              "latKeyName" : "latitude",
              "lngKeyName" : "longitude",
              "showLabel" : true,
              "label" : "${entityName}",
              "tooltipPattern" : "<b>${entityName}</b><br/><br/><b>CO₂:</b> ${co2:1} ppm<br/><b>TVOCs:</b> ${tvoc:0} mg/m³<br/><br/>",
              "markerImageSize" : 60,
              "useColorFunction" : false,
              "markerImages" : [ ],
              "useMarkerImageFunction" : false,
              "colorFunction" : "\n",
              "color" : "#fe7569",
              "mapProvider" : "OpenStreetMap.HOT",
              "showTooltip" : true,
              "autocloseTooltip" : true,
              "customProviderTileUrl" : "https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png",
              "defaultCenterPosition" : "0,0",
              "showTooltipAction" : "click",
              "polygonKeyName" : "coordinates",
              "polygonOpacity" : 0.5,
              "polygonStrokeOpacity" : 1,
              "polygonStrokeWeight" : 1,
              "zoomOnClick" : true,
              "showCoverageOnHover" : true,
              "animate" : true,
              "maxClusterRadius" : 80,
              "removeOutsideVisibleBounds" : true,
              "useLabelFunction" : true,
              "defaultZoomLevel" : 14,
              "provider" : "image-map",
              "mapPageSize" : 16384,
              "xPosKeyName" : "xPos",
              "yPosKeyName" : "yPos",
              "markerOffsetX" : 0.5,
              "markerOffsetY" : 1,
              "posFunction" : "return {x: origXPos, y: origYPos};",
              "markerImage" : "tb-image;/api/images/tenant/indoor_air_quality_dashboard_widget_sensors_map_marker_image.svg",
              "disableScrollZooming" : true,
              "imageEntityAlias" : "Office",
              "imageUrlAttribute" : "plan",
              "mapImageUrl" : "tb-image;/api/images/system/label_widget_system_widget_background.svg",
              "labelFunction" : "var color = '#2A7DEC';\nreturn '<div style=\"border-radius: 15px; border: solid #ffffff 2px; background-color: #fff; padding: 3px 0px 3px 0px;\"><span style=\"border: solid ' + color + ' 2px; border-radius: 15px; color: ' + color + '; padding: 4px 12px 4px 12px; font-size: 14px; font-weight: 600;\">' + \n           '${entityLabel}' + \n        '</span></div>';"
            },
            "title" : "Sensors map",
            "dropShadow" : false,
            "enableFullscreen" : false,
            "titleStyle" : {
              "fontSize" : "16px",
              "fontWeight" : 400
            },
            "useDashboardTimewindow" : true,
            "showLegend" : false,
            "widgetStyle" : {
              "border-radius" : "8px",
              "box-shadow" : "0px 0px 5px rgba(0, 0, 0, 0.05), 0px 0px 20px -10px rgba(16, 16, 16, 0.35)"
            },
            "actions" : {
              "headerButton" : [ ],
              "tooltipAction" : [ ]
            },
            "showTitleIcon" : false,
            "titleIcon" : null,
            "iconColor" : "rgba(0, 0, 0, 0.87)",
            "iconSize" : "24px",
            "titleTooltip" : "",
            "displayTimewindow" : true,
            "enableDataExport" : false
          },
          "id" : "181424bc-7051-1cac-3583-b959bddceca2",
          "typeFullFqn" : "system.maps_v2.openstreetmap"
        },
        "c82915da-d868-d5ad-f4eb-3f36cc05fa83" : {
          "type" : "alarm",
          "sizeX" : 13,
          "sizeY" : 5,
          "config" : {
            "timewindow" : {
              "hideInterval" : false,
              "hideAggregation" : false,
              "hideAggInterval" : false,
              "hideTimezone" : false,
              "selectedTab" : 0,
              "realtime" : {
                "realtimeType" : 0,
                "timewindowMs" : 2592000000,
                "quickInterval" : "CURRENT_DAY",
                "interval" : 1000
              },
              "aggregation" : {
                "type" : "NONE",
                "limit" : 200
              }
            },
            "showTitle" : true,
            "backgroundColor" : "rgb(255, 255, 255)",
            "color" : "rgba(0, 0, 0, 0.87)",
            "padding" : "4px",
            "settings" : {
              "enableSelection" : true,
              "enableSearch" : true,
              "displayDetails" : false,
              "allowAcknowledgment" : true,
              "allowClear" : true,
              "displayPagination" : true,
              "defaultPageSize" : 10,
              "defaultSortOrder" : "-createdTime",
              "enableSelectColumnDisplay" : false,
              "alarmsTitle" : "Alarms",
              "enableFilter" : true,
              "enableStickyHeader" : true
            },
            "title" : "New Alarms table",
            "dropShadow" : false,
            "enableFullscreen" : false,
            "titleStyle" : {
              "fontSize" : "16px",
              "fontWeight" : 400,
              "padding" : "5px 10px 5px 10px"
            },
            "useDashboardTimewindow" : false,
            "showLegend" : false,
            "alarmSource" : {
              "type" : "entity",
              "name" : "alarms",
              "entityAliasId" : "12ae98c7-1ea2-52cf-64d5-763e9d993547",
              "filterId" : null,
              "dataKeys" : [ {
                "name" : "createdTime",
                "type" : "alarm",
                "label" : "Created time",
                "color" : "#2196f3",
                "settings" : { },
                "_hash" : 0.7308410188824108
              }, {
                "name" : "type",
                "type" : "alarm",
                "label" : "Type",
                "color" : "#f44336",
                "settings" : {
                  "columnWidth" : "80px",
                  "defaultColumnVisibility" : "visible",
                  "columnSelectionToDisplay" : "enabled"
                },
                "_hash" : 0.10212012352561795,
                "units" : null,
                "decimals" : null,
                "funcBody" : null,
                "usePostProcessing" : null,
                "postFuncBody" : null
              }, {
                "name" : "severity",
                "type" : "alarm",
                "label" : "Severity",
                "color" : "#ffc107",
                "settings" : { },
                "_hash" : 0.1777349980531262
              }, {
                "name" : "status",
                "type" : "alarm",
                "label" : "Status",
                "color" : "#607d8b",
                "settings" : { },
                "_hash" : 0.7977920750136249
              } ]
            },
            "alarmsPollingInterval" : 5,
            "showTitleIcon" : false,
            "titleIcon" : null,
            "iconColor" : "rgba(0, 0, 0, 0.87)",
            "iconSize" : "24px",
            "titleTooltip" : "",
            "widgetStyle" : {
              "border-radius" : "8px",
              "box-shadow" : "0px 0px 5px rgba(0, 0, 0, 0.05), 0px 0px 20px -10px rgba(16, 16, 16, 0.35)"
            },
            "displayTimewindow" : true,
            "actions" : { },
            "datasources" : [ ],
            "alarmsMaxCountLoad" : 0,
            "alarmsFetchSize" : 100,
            "alarmFilterConfig" : {
              "statusList" : [ ],
              "severityList" : [ ],
              "typeList" : [ ],
              "searchPropagatedAlarms" : true
            }
          },
          "id" : "c82915da-d868-d5ad-f4eb-3f36cc05fa83",
          "typeFullFqn" : "system.alarm_widgets.alarms_table"
        },
        "c53ac101-aab7-8d2c-2805-7c0376fe77d4" : {
          "type" : "latest",
          "sizeX" : 7.5,
          "sizeY" : 6.5,
          "config" : {
            "timewindow" : {
              "displayValue" : "",
              "selectedTab" : 0,
              "realtime" : {
                "realtimeType" : 1,
                "interval" : 1000,
                "timewindowMs" : 86400000,
                "quickInterval" : "CURRENT_DAY"
              },
              "history" : {
                "historyType" : 0,
                "interval" : 1000,
                "timewindowMs" : 60000,
                "fixedTimewindow" : {
                  "startTimeMs" : 1694102720479,
                  "endTimeMs" : 1694189120479
                },
                "quickInterval" : "CURRENT_DAY"
              },
              "aggregation" : {
                "type" : "NONE",
                "limit" : 200
              }
            },
            "showTitle" : true,
            "backgroundColor" : "rgb(255, 255, 255)",
            "color" : "rgba(0, 0, 0, 0.87)",
            "padding" : "4px",
            "settings" : {
              "enableSearch" : true,
              "displayPagination" : true,
              "defaultPageSize" : 10,
              "defaultSortOrder" : "entityName",
              "displayEntityName" : false,
              "displayEntityType" : false,
              "enableSelectColumnDisplay" : false,
              "enableStickyHeader" : true,
              "enableStickyAction" : true,
              "entitiesTitle" : "Buildings",
              "reserveSpaceForHiddenAction" : "false"
            },
            "title" : "New Entities table",
            "dropShadow" : false,
            "enableFullscreen" : false,
            "titleStyle" : {
              "fontSize" : "16px",
              "fontWeight" : 400,
              "padding" : "5px 10px 5px 10px"
            },
            "useDashboardTimewindow" : false,
            "showLegend" : false,
            "datasources" : [ {
              "type" : "entity",
              "name" : null,
              "entityAliasId" : "f41c2f1f-1282-2051-80cf-8eda923f4606",
              "filterId" : null,
              "dataKeys" : [ {
                "name" : "label",
                "type" : "entityField",
                "label" : "Building",
                "color" : "#ffc107",
                "settings" : {
                  "columnWidth" : "0px",
                  "useCellStyleFunction" : false,
                  "cellStyleFunction" : "",
                  "useCellContentFunction" : false,
                  "cellContentFunction" : "",
                  "defaultColumnVisibility" : "visible",
                  "columnSelectionToDisplay" : "enabled"
                },
                "_hash" : 0.6699353111010027,
                "units" : null,
                "decimals" : null,
                "funcBody" : null,
                "usePostProcessing" : null,
                "postFuncBody" : null
              }, {
                "name" : "address",
                "type" : "attribute",
                "label" : "Address",
                "color" : "#2196f3",
                "settings" : {
                  "columnWidth" : "0px",
                  "useCellStyleFunction" : false,
                  "cellStyleFunction" : "",
                  "useCellContentFunction" : false,
                  "cellContentFunction" : "",
                  "defaultColumnVisibility" : "visible",
                  "columnSelectionToDisplay" : "enabled"
                },
                "_hash" : 0.9672097133640545,
                "units" : null,
                "decimals" : null,
                "funcBody" : null,
                "usePostProcessing" : null,
                "postFuncBody" : null
              }, {
                "name" : "email",
                "type" : "attribute",
                "label" : "Email",
                "color" : "#4caf50",
                "settings" : {
                  "columnWidth" : "0px",
                  "useCellStyleFunction" : false,
                  "cellStyleFunction" : "",
                  "useCellContentFunction" : false,
                  "cellContentFunction" : "",
                  "defaultColumnVisibility" : "visible",
                  "columnSelectionToDisplay" : "enabled"
                },
                "_hash" : 0.2547099518872633,
                "units" : null,
                "decimals" : null,
                "funcBody" : null,
                "usePostProcessing" : null,
                "postFuncBody" : null
              }, {
                "name" : "phone",
                "type" : "attribute",
                "label" : "Phone",
                "color" : "#f44336",
                "settings" : {
                  "columnWidth" : "0px",
                  "useCellStyleFunction" : false,
                  "cellStyleFunction" : "",
                  "useCellContentFunction" : false,
                  "cellContentFunction" : "",
                  "defaultColumnVisibility" : "visible",
                  "columnSelectionToDisplay" : "enabled"
                },
                "_hash" : 0.372968782592801,
                "units" : null,
                "decimals" : null,
                "funcBody" : null,
                "usePostProcessing" : null,
                "postFuncBody" : null
              } ]
            } ],
            "actions" : {
              "rowClick" : [ {
                "name" : "view details",
                "icon" : "more_horiz",
                "type" : "openDashboardState",
                "targetDashboardStateId" : "office",
                "setEntityId" : true,
                "stateEntityParamName" : null,
                "openInSeparateDialog" : false,
                "dialogTitle" : "",
                "dialogHideDashboardToolbar" : true,
                "dialogWidth" : null,
                "dialogHeight" : null,
                "openRightLayout" : false,
                "id" : "dd5be3c4-c16e-ae51-28c6-072ae89314ab"
              } ],
              "headerButton" : [ {
                "name" : "Add building",
                "icon" : "add",
                "useShowWidgetActionFunction" : true,
                "showWidgetActionFunction" : "return widgetContext.currentUser.authority == 'TENANT_ADMIN';",
                "type" : "customPretty",
                "customHtml" : "<form #addEntityForm=\"ngForm\" [formGroup]=\"addEntityFormGroup\"\n      (ngSubmit)=\"save()\" class=\"add-entity-form\">\n    <mat-toolbar fxLayout=\"row\" color=\"primary\">\n        <h2>Add building</h2>\n        <span fxFlex></span>\n        <button mat-icon-button (click)=\"cancel()\" type=\"button\">\n            <mat-icon class=\"material-icons\">close</mat-icon>\n        </button>\n    </mat-toolbar>\n    <mat-progress-bar color=\"warn\" mode=\"indeterminate\" *ngIf=\"isLoading$ | async\">\n    </mat-progress-bar>\n    <div style=\"height: 4px;\" *ngIf=\"!(isLoading$ | async)\"></div>\n    <div mat-dialog-content fxLayout=\"column\">\n        <div fxLayout=\"row\" fxLayoutGap=\"8px\" fxLayout.xs=\"column\"  fxLayoutGap.xs=\"0\">\n            <mat-form-field fxFlex class=\"mat-block\">\n                <mat-label>Building name</mat-label>\n                <input matInput formControlName=\"entityName\" required>\n                <mat-error *ngIf=\"addEntityFormGroup.get('entityName').hasError('required')\">\n                    Building name is required.\n                </mat-error>\n            </mat-form-field>\n            <mat-form-field fxFlex class=\"mat-block\">\n                <mat-label>Building label</mat-label>\n                <input matInput formControlName=\"entityLabel\" >\n            </mat-form-field>\n        </div>\n        <div formGroupName=\"attributes\" fxLayout=\"column\">\n            <div fxLayout=\"row\" fxLayoutGap=\"8px\" fxLayout.xs=\"column\"  fxLayoutGap.xs=\"0\">\n                <mat-form-field fxFlex class=\"mat-block\">\n                    <mat-label>Latitude</mat-label>\n                    <input type=\"number\" step=\"any\" matInput formControlName=\"latitude\">\n                </mat-form-field>\n                <mat-form-field fxFlex class=\"mat-block\">\n                    <mat-label>Longitude</mat-label>\n                    <input type=\"number\" step=\"any\" matInput formControlName=\"longitude\">\n                </mat-form-field>\n            </div>\n            <div fxLayout=\"row\" fxLayoutGap=\"8px\" fxLayout.xs=\"column\"  fxLayoutGap.xs=\"0\">\n                <mat-form-field fxFlex class=\"mat-block\">\n                    <mat-label>Address</mat-label>\n                    <input matInput formControlName=\"address\">\n                </mat-form-field>\n                <mat-form-field fxFlex class=\"mat-block\">\n                    <mat-label>Email</mat-label>\n                    <input matInput formControlName=\"email\">\n                </mat-form-field>\n            </div>\n            <div fxLayout=\"row\" fxLayoutGap=\"8px\" fxLayout.xs=\"column\"  fxLayoutGap.xs=\"0\">\n                <mat-form-field fxFlex class=\"mat-block\">\n                    <mat-label>Phone</mat-label>\n                    <input matInput formControlName=\"phone\">\n                </mat-form-field>\n                <mat-form-field fxFlex class=\"mat-block\">\n                    <mat-label>Building plan URL</mat-label>\n                    <input matInput formControlName=\"plan\">\n                </mat-form-field>\n            </div>\n        </div>\n        <tb-entity-autocomplete\n            [entityType]='\"CUSTOMER\"'\n            formControlName=\"customerId\"\n        >\n        </tb-entity-autocomplete>\n    </div>\n    <div mat-dialog-actions fxLayout=\"row\" fxLayoutAlign=\"end center\">\n        <button mat-button color=\"primary\"\n                type=\"button\"\n                [disabled]=\"(isLoading$ | async)\"\n                (click)=\"cancel()\" cdkFocusInitial>\n            Cancel\n        </button>\n        <button mat-button mat-raised-button color=\"primary\"\n                type=\"submit\"\n                [disabled]=\"(isLoading$ | async) || addEntityForm.invalid || !addEntityForm.dirty\">\n            Create\n        </button>\n    </div>\n</form>",
                "customCss" : "/*=======================================================================*/\n/*==========  There are two examples: for edit and add entity  ==========*/\n/*=======================================================================*/\n/*========================  Edit entity example  ========================*/\n/*=======================================================================*/\n/*\n.edit-entity-form .boolean-value-input {\n    padding-left: 5px;\n}\n\n.edit-entity-form .boolean-value-input .checkbox-label {\n    margin-bottom: 8px;\n    color: rgba(0,0,0,0.54);\n    font-size: 12px;\n}\n\n.relations-list .header {\n    padding-right: 5px;\n    padding-bottom: 5px;\n    padding-left: 5px;\n}\n\n.relations-list .header .cell {\n    padding-right: 5px;\n    padding-left: 5px;\n    font-size: 12px;\n    font-weight: 700;\n    color: rgba(0, 0, 0, .54);\n    white-space: nowrap;\n}\n\n.relations-list .mat-form-field-infix {\n    width: auto !important;\n}\n\n.relations-list .body {\n    padding-right: 5px;\n    padding-bottom: 15px;\n    padding-left: 5px;\n}\n\n.relations-list .body .row {\n    padding-top: 5px;\n}\n\n.relations-list .body .cell {\n    padding-right: 5px;\n    padding-left: 5px;\n}\n\n.relations-list .body .md-button {\n    margin: 0;\n}\n*/\n/*========================================================================*/\n/*=========================  Add entity example  =========================*/\n/*========================================================================*/\n/*\n.add-entity-form .boolean-value-input {\n    padding-left: 5px;\n}\n\n.add-entity-form .boolean-value-input .checkbox-label {\n    margin-bottom: 8px;\n    color: rgba(0,0,0,0.54);\n    font-size: 12px;\n}\n\n.relations-list .header {\n    padding-right: 5px;\n    padding-bottom: 5px;\n    padding-left: 5px;\n}\n\n.relations-list .header .cell {\n    padding-right: 5px;\n    padding-left: 5px;\n    font-size: 12px;\n    font-weight: 700;\n    color: rgba(0, 0, 0, .54);\n    white-space: nowrap;\n}\n\n.relations-list .mat-form-field-infix {\n    width: auto !important;\n}\n\n.relations-list .body {\n    padding-right: 5px;\n    padding-bottom: 15px;\n    padding-left: 5px;\n}\n\n.relations-list .body .row {\n    padding-top: 5px;\n}\n\n.relations-list .body .cell {\n    padding-right: 5px;\n    padding-left: 5px;\n}\n\n.relations-list .body .md-button {\n    margin: 0;\n}\n*/\n",
                "customFunction" : "let $injector = widgetContext.$scope.$injector;\nlet customDialog = $injector.get(widgetContext.servicesMap.get('customDialog'));\nlet assetService = $injector.get(widgetContext.servicesMap.get('assetService'));\nlet attributeService = $injector.get(widgetContext.servicesMap.get('attributeService'));\n\nopenAddEntityDialog();\n\nfunction openAddEntityDialog() {\n    customDialog.customDialog(htmlTemplate, AddEntityDialogController).subscribe();\n}\n\nfunction AddEntityDialogController(instance) {\n    let vm = instance;\n\n    vm.addEntityFormGroup = vm.fb.group({\n     entityName: ['', [vm.validators.required]],\n     entityLabel: [null],\n     customerId: [null],\n     attributes: vm.fb.group({\n         latitude: [null],\n         longitude: [null],\n         address: [null],\n         email: [null],\n         phone: [null],\n         plan: [null]\n     }),\n     relations: vm.fb.array([])\n    });\n\n    vm.cancel = function() {\n        vm.dialogRef.close(null);\n    };\n\n    vm.save = function() {\n        vm.addEntityFormGroup.markAsPristine();\n        saveEntityObservable().subscribe(\n            function (entity) {\n                widgetContext.rxjs.forkJoin([\n                    saveAttributes(entity.id)\n                ]).subscribe(\n                    function () {\n                        widgetContext.updateAliases();\n                        vm.dialogRef.close(null);\n                    }\n                );\n            }\n        );\n    };\n\n    function saveEntityObservable() {\n        const formValues = vm.addEntityFormGroup.value;\n        let entity = {\n            name: formValues.entityName,\n            type: 'office',\n            label: formValues.entityLabel\n        };\n        if (formValues.customerId !== null) {\n            entity.customerId = {id: formValues.customerId, entityType: \"CUSTOMER\"};\n        }\n        return assetService.saveAsset(entity);\n    }\n\n    function saveAttributes(entityId) {\n        let attributes = vm.addEntityFormGroup.get('attributes').value;\n        let attributesArray = [];\n        for (let key in attributes) {\n            if(attributes[key] !== null) {\n                attributesArray.push({key: key, value: attributes[key]});\n            }\n        }\n        if (attributesArray.length > 0) {\n            return attributeService.saveEntityAttributes(entityId, \"SERVER_SCOPE\", attributesArray);\n        }\n        return widgetContext.rxjs.of([]);\n    }\n}\n",
                "customResources" : [ ],
                "id" : "7a4c090c-49f5-358a-2771-2e52076897a8"
              } ],
              "actionCellButton" : [ {
                "name" : "Edit building",
                "icon" : "edit",
                "useShowWidgetActionFunction" : null,
                "showWidgetActionFunction" : "return true;",
                "type" : "customPretty",
                "customHtml" : "<form #editEntityForm=\"ngForm\" [formGroup]=\"editEntityFormGroup\"\n      (ngSubmit)=\"save()\"  class=\"edit-entity-form\">\n    <mat-toolbar fxLayout=\"row\" color=\"primary\">\n        <h2>Edit building: {{entityName}}</h2>\n        <span fxFlex></span>\n        <button mat-icon-button (click)=\"cancel()\" type=\"button\">\n            <mat-icon class=\"material-icons\">close</mat-icon>\n        </button>\n    </mat-toolbar>\n    <mat-progress-bar color=\"warn\" mode=\"indeterminate\" *ngIf=\"isLoading$ | async\">\n    </mat-progress-bar>\n    <div style=\"height: 4px;\" *ngIf=\"!(isLoading$ | async)\"></div>\n    <div mat-dialog-content fxLayout=\"column\">\n        <div fxLayout=\"row\" fxLayoutGap=\"8px\" fxLayout.xs=\"column\"  fxLayoutGap.xs=\"0\">\n            <mat-form-field fxFlex class=\"mat-block\">\n                <mat-label>Building name</mat-label>\n                <input matInput formControlName=\"entityName\" required readonly=\"\">\n            </mat-form-field>\n            <mat-form-field fxFlex class=\"mat-block\">\n                <mat-label>Building label</mat-label>\n                <input matInput formControlName=\"entityLabel\" >\n            </mat-form-field>\n        </div>\n        <div formGroupName=\"attributes\" fxLayout=\"column\">\n            <div fxLayout=\"row\" fxLayoutGap=\"8px\" fxLayout.xs=\"column\"  fxLayoutGap.xs=\"0\">\n                <mat-form-field fxFlex class=\"mat-block\">\n                    <mat-label>Latitude</mat-label>\n                    <input type=\"number\" step=\"any\" matInput formControlName=\"latitude\">\n                </mat-form-field>\n                <mat-form-field fxFlex class=\"mat-block\">\n                    <mat-label>Longitude</mat-label>\n                    <input type=\"number\" step=\"any\" matInput formControlName=\"longitude\">\n                </mat-form-field>\n            </div>\n            <div fxLayout=\"row\" fxLayoutGap=\"8px\" fxLayout.xs=\"column\"  fxLayoutGap.xs=\"0\">\n                <mat-form-field fxFlex class=\"mat-block\">\n                    <mat-label>Address</mat-label>\n                    <input matInput formControlName=\"address\">\n                </mat-form-field>\n                <mat-form-field fxFlex class=\"mat-block\">\n                    <mat-label>Email</mat-label>\n                    <input matInput formControlName=\"email\">\n                </mat-form-field>\n            </div>\n            <div fxLayout=\"row\" fxLayoutGap=\"8px\" fxLayout.xs=\"column\"  fxLayoutGap.xs=\"0\">\n                <mat-form-field fxFlex class=\"mat-block\">\n                    <mat-label>Phone</mat-label>\n                    <input matInput formControlName=\"phone\">\n                </mat-form-field>\n                <mat-form-field fxFlex class=\"mat-block\">\n                    <mat-label>Building plan URL</mat-label>\n                    <input matInput formControlName=\"plan\">\n                </mat-form-field>\n            </div>\n        </div>\n        <tb-entity-autocomplete\n            *ngIf=isTenant\n            [entityType]='\"CUSTOMER\"'\n            formControlName=\"customerId\"\n        >\n        </tb-entity-autocomplete>\n    </div>\n    <div mat-dialog-actions fxLayout=\"row\" fxLayoutAlign=\"end center\">\n        <button mat-button color=\"primary\"\n                type=\"button\"\n                [disabled]=\"(isLoading$ | async)\"\n                (click)=\"cancel()\" cdkFocusInitial>\n            Cancel\n        </button>\n        <button mat-button mat-raised-button color=\"primary\"\n                type=\"submit\"\n                [disabled]=\"(isLoading$ | async) || editEntityForm.invalid || !editEntityForm.dirty\">\n            Save\n        </button>\n    </div>\n</form>",
                "customCss" : "/*=======================================================================*/\n/*==========  There are two examples: for edit and add entity  ==========*/\n/*=======================================================================*/\n/*========================  Edit entity example  ========================*/\n/*=======================================================================*/\n/*\n.edit-entity-form .boolean-value-input {\n    padding-left: 5px;\n}\n\n.edit-entity-form .boolean-value-input .checkbox-label {\n    margin-bottom: 8px;\n    color: rgba(0,0,0,0.54);\n    font-size: 12px;\n}\n\n.relations-list .header {\n    padding-right: 5px;\n    padding-bottom: 5px;\n    padding-left: 5px;\n}\n\n.relations-list .header .cell {\n    padding-right: 5px;\n    padding-left: 5px;\n    font-size: 12px;\n    font-weight: 700;\n    color: rgba(0, 0, 0, .54);\n    white-space: nowrap;\n}\n\n.relations-list .mat-form-field-infix {\n    width: auto !important;\n}\n\n.relations-list .body {\n    padding-right: 5px;\n    padding-bottom: 15px;\n    padding-left: 5px;\n}\n\n.relations-list .body .row {\n    padding-top: 5px;\n}\n\n.relations-list .body .cell {\n    padding-right: 5px;\n    padding-left: 5px;\n}\n\n.relations-list .body .md-button {\n    margin: 0;\n}\n*/\n/*========================================================================*/\n/*=========================  Add entity example  =========================*/\n/*========================================================================*/\n/*\n.add-entity-form .boolean-value-input {\n    padding-left: 5px;\n}\n\n.add-entity-form .boolean-value-input .checkbox-label {\n    margin-bottom: 8px;\n    color: rgba(0,0,0,0.54);\n    font-size: 12px;\n}\n\n.relations-list .header {\n    padding-right: 5px;\n    padding-bottom: 5px;\n    padding-left: 5px;\n}\n\n.relations-list .header .cell {\n    padding-right: 5px;\n    padding-left: 5px;\n    font-size: 12px;\n    font-weight: 700;\n    color: rgba(0, 0, 0, .54);\n    white-space: nowrap;\n}\n\n.relations-list .mat-form-field-infix {\n    width: auto !important;\n}\n\n.relations-list .body {\n    padding-right: 5px;\n    padding-bottom: 15px;\n    padding-left: 5px;\n}\n\n.relations-list .body .row {\n    padding-top: 5px;\n}\n\n.relations-list .body .cell {\n    padding-right: 5px;\n    padding-left: 5px;\n}\n\n.relations-list .body .md-button {\n    margin: 0;\n}\n*/\n",
                "customFunction" : "let $injector = widgetContext.$scope.$injector;\nlet customDialog = $injector.get(widgetContext.servicesMap.get('customDialog'));\nlet entityService = $injector.get(widgetContext.servicesMap.get('entityService'));\nlet assetService = $injector.get(widgetContext.servicesMap.get('assetService'));\nlet attributeService = $injector.get(widgetContext.servicesMap.get('attributeService'));\n\nopenEditEntityDialog();\n\nfunction openEditEntityDialog() {\n    customDialog.customDialog(htmlTemplate, EditEntityDialogController).subscribe();\n}\n\nfunction EditEntityDialogController(instance) {\n    let vm = instance;\n    \n    const NULL_UUID = '13814000-1dd2-11b2-8080-808080808080';\n\n    vm.entityName = entityName;\n    vm.attributes = {};\n    vm.entity = {};\n    vm.isTenant = widgetContext.currentUser.authority == 'TENANT_ADMIN';\n\n    vm.editEntityFormGroup = vm.fb.group({\n        entityName: ['', [vm.validators.required]],\n        entityLabel: [null],\n        attributes: vm.fb.group({\n            latitude: [null],\n            longitude: [null],\n            address: [null],\n            email: [null],\n            phone: [null],\n            plan: [null]\n        }),\n        customerId: [null]\n    });\n\n    getEntityInfo();\n\n    vm.cancel = function() {\n        vm.dialogRef.close(null);\n    };\n\n    vm.save = function() {\n        widgetContext.rxjs.forkJoin([\n            saveAttributes(entityId),\n            saveEntity()\n        ]).subscribe(\n            function () {\n                widgetContext.updateAliases();\n                vm.dialogRef.close(null);\n            }\n        );\n    };\n\n    function getEntityAttributes(attributes) {\n        for (var i = 0; i < attributes.length; i++) {\n            vm.attributes[attributes[i].key] = attributes[i].value;\n        }\n    }\n\n    function getEntityInfo() {\n        widgetContext.rxjs.forkJoin([\n            attributeService.getEntityAttributes(entityId, 'SERVER_SCOPE'),\n            entityService.getEntity(entityId.entityType, entityId.id)\n        ]).subscribe(\n            function (data) {\n                getEntityAttributes(data[0]);\n                vm.entity = data[1];\n                vm.editEntityFormGroup.patchValue({\n                    entityName: vm.entity.name,\n                    entityLabel: vm.entity.label,\n                    attributes: vm.attributes,\n                    customerId: vm.entity.customerId.id !== NULL_UUID ? vm.entity.customerId.id : null  \n                }, {emitEvent: false});\n            }\n        );\n    }\n\n    function saveEntity() {\n        const formValues = vm.editEntityFormGroup.value;\n        \n        let customerId;\n        if (formValues.customerId === null) {\n            customerId = {\n                id: NULL_UUID,\n                entityType: \"CUSTOMER\"\n            };\n        } else {\n            customerId = {\n                id: formValues.customerId,\n                entityType: \"CUSTOMER\"\n            };\n        }\n        \n        if (vm.entity.label !== formValues.entityLabel ||\n            vm.entity.customerId.id !== customerId.id){\n            vm.entity.label = formValues.entityLabel;\n            vm.entity.customerId = customerId;\n            return assetService.saveAsset(vm.entity);\n        }\n        return widgetContext.rxjs.of([]);\n    }\n\n    function saveAttributes(entityId) {\n        let attributes = vm.editEntityFormGroup.get('attributes').value;\n        let attributesArray = [];\n        for (let key in attributes) {\n            if (attributes[key] !== vm.attributes[key]) {\n                attributesArray.push({key: key, value: attributes[key]});\n            }\n        }\n        if (attributesArray.length > 0) {\n            return attributeService.saveEntityAttributes(entityId, \"SERVER_SCOPE\", attributesArray);\n        }\n        return widgetContext.rxjs.of([]);\n    }\n}",
                "customResources" : [ ],
                "id" : "dc4e0d13-fce1-cd5e-3e92-71aa211a63f8"
              }, {
                "name" : "Delete building",
                "icon" : "delete",
                "useShowWidgetActionFunction" : true,
                "showWidgetActionFunction" : "return widgetContext.currentUser.authority == 'TENANT_ADMIN';",
                "type" : "custom",
                "customFunction" : "let $injector = widgetContext.$scope.$injector;\nlet dialogs = $injector.get(widgetContext.servicesMap.get('dialogs'));\nlet assetService = $injector.get(widgetContext.servicesMap.get('assetService'));\n\nopenDeleteEntityDialog();\n\nfunction openDeleteEntityDialog() {\n    let title = 'Delete office \"' + entityName + '\"';\n    let content = 'Are you sure you want to delete office \"' + entityName + '\"?';\n    dialogs.confirm(title, content, 'Cancel', 'Delete').subscribe(\n        function(result) {\n            if (result) {\n                deleteEntity();\n            }\n        }\n    );\n}\n\nfunction deleteEntity() {\n    deleteEntityObservable(entityId).subscribe(\n        function success() {\n            widgetContext.updateAliases();\n        },\n        function fail() {\n            showErrorDialog();\n        }\n    );\n}\n\nfunction deleteEntityObservable(entityId) {\n    return assetService.deleteAsset(entityId.id);\n}\n\nfunction showErrorDialog() {\n    let title = 'Error';\n    let content = 'An error occurred while deleting the office. Please try again.';\n    dialogs.alert(title, content, 'CLOSE').subscribe(\n        function(result) {}\n    );\n}\n",
                "id" : "995a31f7-e57d-a87a-d6cc-79525ecc2fad"
              } ]
            },
            "showTitleIcon" : false,
            "iconColor" : "rgba(0, 0, 0, 0.87)",
            "iconSize" : "24px",
            "titleTooltip" : "",
            "widgetStyle" : {
              "border-radius" : "8px",
              "box-shadow" : "0px 0px 5px rgba(0, 0, 0, 0.05), 0px 0px 20px -10px rgba(16, 16, 16, 0.35)"
            }
          },
          "row" : 0,
          "col" : 0,
          "id" : "c53ac101-aab7-8d2c-2805-7c0376fe77d4",
          "typeFullFqn" : "system.cards.entities_table"
        },
        "6363d7ed-b0f5-75c3-333c-990e9c1799bb" : {
          "type" : "alarm",
          "sizeX" : 10.5,
          "sizeY" : 6.5,
          "config" : {
            "timewindow" : {
              "hideInterval" : false,
              "hideAggregation" : false,
              "hideAggInterval" : false,
              "hideTimezone" : false,
              "selectedTab" : 0,
              "realtime" : {
                "realtimeType" : 0,
                "timewindowMs" : 2592000000,
                "quickInterval" : "CURRENT_DAY",
                "interval" : 1000
              },
              "aggregation" : {
                "type" : "NONE",
                "limit" : 200
              }
            },
            "showTitle" : true,
            "backgroundColor" : "rgb(255, 255, 255)",
            "color" : "rgba(0, 0, 0, 0.87)",
            "padding" : "4px",
            "settings" : {
              "enableSelection" : true,
              "enableSearch" : true,
              "displayDetails" : false,
              "allowAcknowledgment" : true,
              "allowClear" : true,
              "displayPagination" : true,
              "defaultPageSize" : 10,
              "defaultSortOrder" : "-createdTime",
              "enableSelectColumnDisplay" : false,
              "enableStickyAction" : false,
              "enableFilter" : true,
              "enableStickyHeader" : true
            },
            "title" : "New Alarms table",
            "dropShadow" : false,
            "enableFullscreen" : false,
            "titleStyle" : {
              "fontSize" : "16px",
              "fontWeight" : 400,
              "padding" : "5px 10px 5px 10px"
            },
            "useDashboardTimewindow" : false,
            "showLegend" : false,
            "alarmSource" : {
              "type" : "entity",
              "name" : null,
              "entityAliasId" : "f41c2f1f-1282-2051-80cf-8eda923f4606",
              "filterId" : null,
              "dataKeys" : [ {
                "name" : "createdTime",
                "type" : "alarm",
                "label" : "Created time",
                "color" : "#2196f3",
                "settings" : {
                  "useCellStyleFunction" : false,
                  "cellStyleFunction" : "",
                  "useCellContentFunction" : false,
                  "cellContentFunction" : ""
                },
                "_hash" : 0.021092237451093787
              }, {
                "name" : "originator",
                "type" : "alarm",
                "label" : "Originator",
                "color" : "#4caf50",
                "settings" : {
                  "useCellStyleFunction" : false,
                  "cellStyleFunction" : "",
                  "useCellContentFunction" : false,
                  "cellContentFunction" : ""
                },
                "_hash" : 0.2780007688856758
              }, {
                "name" : "type",
                "type" : "alarm",
                "label" : "Type",
                "color" : "#f44336",
                "settings" : {
                  "useCellStyleFunction" : false,
                  "cellStyleFunction" : "",
                  "useCellContentFunction" : false,
                  "cellContentFunction" : ""
                },
                "_hash" : 0.7323586880398418
              }, {
                "name" : "severity",
                "type" : "alarm",
                "label" : "Severity",
                "color" : "#ffc107",
                "settings" : {
                  "useCellStyleFunction" : false,
                  "useCellContentFunction" : false
                },
                "_hash" : 0.09927019860088193
              }, {
                "name" : "status",
                "type" : "alarm",
                "label" : "Status",
                "color" : "#607d8b",
                "settings" : {
                  "useCellStyleFunction" : false,
                  "cellStyleFunction" : "",
                  "useCellContentFunction" : false,
                  "cellContentFunction" : ""
                },
                "_hash" : 0.6588418951443418
              } ]
            },
            "alarmsPollingInterval" : 5,
            "showTitleIcon" : false,
            "titleIcon" : "more_horiz",
            "iconColor" : "rgba(0, 0, 0, 0.87)",
            "iconSize" : "24px",
            "titleTooltip" : "",
            "widgetStyle" : {
              "border-radius" : "8px",
              "box-shadow" : "0px 0px 5px rgba(0, 0, 0, 0.05), 0px 0px 20px -10px rgba(16, 16, 16, 0.35)"
            },
            "displayTimewindow" : true,
            "actions" : { },
            "datasources" : [ ],
            "alarmFilterConfig" : {
              "statusList" : [ ],
              "severityList" : [ ],
              "typeList" : [ ],
              "searchPropagatedAlarms" : true
            }
          },
          "row" : 0,
          "col" : 0,
          "id" : "6363d7ed-b0f5-75c3-333c-990e9c1799bb",
          "typeFullFqn" : "system.alarm_widgets.alarms_table"
        },
        "f9429338-e7fd-ed66-71ac-8552a6eb0eaf" : {
          "type" : "latest",
          "sizeX" : 8.5,
          "sizeY" : 6,
          "config" : {
            "datasources" : [ {
              "type" : "entity",
              "name" : null,
              "entityAliasId" : "f41c2f1f-1282-2051-80cf-8eda923f4606",
              "filterId" : null,
              "dataKeys" : [ {
                "name" : "longitude",
                "type" : "attribute",
                "label" : "longitude",
                "color" : "#2196f3",
                "settings" : { },
                "_hash" : 0.3504761115562598
              }, {
                "name" : "latitude",
                "type" : "attribute",
                "label" : "latitude",
                "color" : "#4caf50",
                "settings" : { },
                "_hash" : 0.17406770147050588
              }, {
                "name" : "address",
                "type" : "attribute",
                "label" : "address",
                "color" : "#f44336",
                "settings" : { },
                "_hash" : 0.058182394910685886
              }, {
                "name" : "email",
                "type" : "attribute",
                "label" : "email",
                "color" : "#ffc107",
                "settings" : { },
                "_hash" : 0.9118024450915152
              }, {
                "name" : "phone",
                "type" : "attribute",
                "label" : "phone",
                "color" : "#607d8b",
                "settings" : { },
                "_hash" : 0.013272511269464493
              } ]
            } ],
            "timewindow" : {
              "displayValue" : "",
              "selectedTab" : 0,
              "realtime" : {
                "realtimeType" : 1,
                "interval" : 1000,
                "timewindowMs" : 60000,
                "quickInterval" : "CURRENT_DAY"
              },
              "history" : {
                "historyType" : 0,
                "interval" : 1000,
                "timewindowMs" : 60000,
                "fixedTimewindow" : {
                  "startTimeMs" : 1694102720479,
                  "endTimeMs" : 1694189120479
                },
                "quickInterval" : "CURRENT_DAY"
              },
              "aggregation" : {
                "type" : "AVG",
                "limit" : 25000
              }
            },
            "showTitle" : false,
            "backgroundColor" : "#fff",
            "color" : "rgba(0, 0, 0, 0.87)",
            "padding" : "8px",
            "settings" : {
              "fitMapBounds" : true,
              "latKeyName" : "latitude",
              "lngKeyName" : "longitude",
              "showLabel" : true,
              "label" : "${entityName}",
              "tooltipPattern" : "<b>${entityName}</b><br/><br/><b>Latitude:</b> ${latitude:7}<br/><b>Longitude:</b> ${longitude:7}<br/><br/><link-act name='details'>Sensor details</link-act>",
              "markerImageSize" : 60,
              "useColorFunction" : false,
              "markerImages" : [ ],
              "useMarkerImageFunction" : false,
              "colorFunction" : "\n",
              "color" : "#000000",
              "mapProvider" : "OpenStreetMap.Mapnik",
              "showTooltip" : true,
              "autocloseTooltip" : true,
              "provider" : "openstreet-map",
              "defaultCenterPosition" : "0,0",
              "showTooltipAction" : "click",
              "mapPageSize" : 16384,
              "useTooltipFunction" : true,
              "draggableMarker" : false,
              "markerImage" : "tb-image;/api/images/tenant/indoor_air_quality_dashboard_widget_new_openstreetmap_marker_image.svg",
              "useLabelFunction" : true,
              "tooltipFunction" : "let tooltip = \"<b>${entityName}</b><br/><br/>\";\n\nif (data.phone) {\n    tooltip += \"<i style='font-size: 18px; padding-right: 9px' class='fa fa-phone'></i>\" + data.phone + \"<br/>\"\n}\n\nif (data.email) {\n    tooltip += \"<i style='font-size: 18px; padding-right: 5px' class='fa fa-envelope'></i>\" + data.email + \"<br/>\"\n}\n\n\nif (data.address) {\n    tooltip += \"<i style='font-size: 18px; padding-right: 13px' class='fa fa-map-marker'></i>\" + data.address + \"<br/>\"\n}\n\ntooltip += \"<br/><link-act name='details'>Office details</link-act>\";\n\nreturn tooltip;",
              "labelFunction" : "var color = '#2A7DEC';\nreturn '<div style=\"border-radius: 15px; border: solid #ffffff 2px; background-color: #fff; padding: 3px 0px 3px 0px;\"><span style=\"border: solid ' + color + ' 2px; border-radius: 15px; color: ' + color + '; padding: 4px 12px 4px 12px; font-size: 14px; font-weight: 600;\">' + \n           '${entityName}' + \n        '</span></div>';"
            },
            "title" : "New OpenStreetMap",
            "dropShadow" : false,
            "enableFullscreen" : false,
            "titleStyle" : {
              "fontSize" : "16px",
              "fontWeight" : 400
            },
            "useDashboardTimewindow" : true,
            "showLegend" : false,
            "widgetStyle" : {
              "border-radius" : "8px",
              "box-shadow" : "0px 0px 5px rgba(0, 0, 0, 0.05), 0px 0px 20px -10px rgba(16, 16, 16, 0.35)"
            },
            "actions" : {
              "tooltipAction" : [ {
                "name" : "details",
                "icon" : "more_horiz",
                "type" : "openDashboardState",
                "targetDashboardStateId" : "office",
                "setEntityId" : true,
                "stateEntityParamName" : null,
                "openInSeparateDialog" : false,
                "dialogTitle" : "",
                "dialogHideDashboardToolbar" : true,
                "dialogWidth" : null,
                "dialogHeight" : null,
                "openRightLayout" : false,
                "id" : "1de65db2-a912-dd6a-53f5-a8857c57d1d6"
              } ]
            },
            "showTitleIcon" : false,
            "iconColor" : "rgba(0, 0, 0, 0.87)",
            "iconSize" : "24px",
            "titleTooltip" : ""
          },
          "row" : 0,
          "col" : 0,
          "id" : "f9429338-e7fd-ed66-71ac-8552a6eb0eaf",
          "typeFullFqn" : "system.maps_v2.openstreetmap"
        },
        "e6dabb3b-d6f7-1208-2a9d-46c1ba9d4c2e" : {
          "typeFullFqn" : "system.time_series_chart",
          "type" : "timeseries",
          "sizeX" : 8,
          "sizeY" : 5,
          "config" : {
            "datasources" : [ {
              "type" : "entity",
              "name" : "",
              "entityAliasId" : "12ae98c7-1ea2-52cf-64d5-763e9d993547",
              "dataKeys" : [ {
                "name" : "co2",
                "type" : "timeseries",
                "label" : "CO₂",
                "color" : "#EF5350",
                "settings" : {
                  "yAxisId" : "default",
                  "showInLegend" : true,
                  "dataHiddenByDefault" : false,
                  "type" : "line",
                  "lineSettings" : {
                    "showLine" : true,
                    "step" : false,
                    "stepType" : "start",
                    "smooth" : true,
                    "lineType" : "solid",
                    "lineWidth" : 2.5,
                    "showPoints" : false,
                    "showPointLabel" : false,
                    "pointLabelPosition" : "top",
                    "pointLabelFont" : {
                      "family" : "Roboto",
                      "size" : 11,
                      "sizeUnit" : "px",
                      "style" : "normal",
                      "weight" : "400",
                      "lineHeight" : "1"
                    },
                    "pointLabelColor" : "rgba(0, 0, 0, 0.76)",
                    "pointShape" : "circle",
                    "pointSize" : 14,
                    "fillAreaSettings" : {
                      "type" : "gradient",
                      "opacity" : 0.4,
                      "gradient" : {
                        "start" : 60,
                        "end" : 10
                      }
                    }
                  },
                  "barSettings" : {
                    "showBorder" : false,
                    "borderWidth" : 2,
                    "borderRadius" : 0,
                    "showLabel" : false,
                    "labelPosition" : "top",
                    "labelFont" : {
                      "family" : "Roboto",
                      "size" : 11,
                      "sizeUnit" : "px",
                      "style" : "normal",
                      "weight" : "400",
                      "lineHeight" : "1"
                    },
                    "labelColor" : "rgba(0, 0, 0, 0.76)",
                    "backgroundSettings" : {
                      "type" : "none",
                      "opacity" : 0.4,
                      "gradient" : {
                        "start" : 100,
                        "end" : 0
                      }
                    }
                  }
                },
                "_hash" : 0.8585641404847304,
                "units" : "ppm",
                "decimals" : 1,
                "aggregationType" : null,
                "funcBody" : null,
                "usePostProcessing" : null,
                "postFuncBody" : null
              } ],
              "alarmFilterConfig" : {
                "statusList" : [ "ACTIVE" ]
              },
              "latestDataKeys" : [ ]
            } ],
            "timewindow" : {
              "hideInterval" : false,
              "hideLastInterval" : false,
              "hideQuickInterval" : false,
              "hideAggregation" : false,
              "hideAggInterval" : false,
              "hideTimezone" : false,
              "selectedTab" : 0,
              "realtime" : {
                "realtimeType" : 0,
                "timewindowMs" : 604800000,
                "quickInterval" : "CURRENT_DAY",
                "interval" : 7200000
              },
              "aggregation" : {
                "type" : "AVG",
                "limit" : 25000
              },
              "timezone" : null
            },
            "showTitle" : true,
            "backgroundColor" : "rgba(0, 0, 0, 0)",
            "color" : "rgba(0, 0, 0, 0.87)",
            "padding" : "0px",
            "settings" : {
              "showLegend" : true,
              "legendConfig" : {
                "direction" : "column",
                "position" : "bottom",
                "sortDataKeys" : false,
                "showMin" : true,
                "showMax" : true,
                "showAvg" : true,
                "showTotal" : false,
                "showLatest" : false
              },
              "thresholds" : [ {
                "type" : "constant",
                "yAxisId" : "default",
                "units" : "ppm",
                "decimals" : 0,
                "lineColor" : "#FF0000",
                "lineType" : "solid",
                "lineWidth" : 2,
                "startSymbol" : "none",
                "startSymbolSize" : 5,
                "endSymbol" : "arrow",
                "endSymbolSize" : 8,
                "showLabel" : true,
                "labelPosition" : "end",
                "labelFont" : {
                  "size" : 14,
                  "family" : "Roboto",
                  "weight" : "500",
                  "style" : "normal"
                },
                "labelColor" : "#FF0000",
                "value" : 1000
              } ],
              "dataZoom" : true,
              "stack" : false,
              "yAxis" : {
                "show" : true,
                "label" : "",
                "labelFont" : {
                  "family" : "Roboto",
                  "size" : 12,
                  "sizeUnit" : "px",
                  "style" : "normal",
                  "weight" : "600",
                  "lineHeight" : "1"
                },
                "labelColor" : "rgba(0, 0, 0, 0.54)",
                "position" : "left",
                "showTickLabels" : true,
                "tickLabelFont" : {
                  "family" : "Roboto",
                  "size" : 12,
                  "sizeUnit" : "px",
                  "style" : "normal",
                  "weight" : "400",
                  "lineHeight" : "1"
                },
                "tickLabelColor" : "rgba(0, 0, 0, 0.54)",
                "showTicks" : true,
                "ticksColor" : "rgba(0, 0, 0, 0.54)",
                "showLine" : true,
                "lineColor" : "rgba(0, 0, 0, 0.54)",
                "showSplitLines" : true,
                "splitLinesColor" : "rgba(0, 0, 0, 0.12)"
              },
              "xAxis" : {
                "show" : true,
                "label" : "",
                "labelFont" : {
                  "family" : "Roboto",
                  "size" : 12,
                  "sizeUnit" : "px",
                  "style" : "normal",
                  "weight" : "600",
                  "lineHeight" : "1"
                },
                "labelColor" : "rgba(0, 0, 0, 0.54)",
                "position" : "bottom",
                "showTickLabels" : true,
                "tickLabelFont" : {
                  "family" : "Roboto",
                  "size" : 10,
                  "sizeUnit" : "px",
                  "style" : "normal",
                  "weight" : "400",
                  "lineHeight" : "1"
                },
                "tickLabelColor" : "rgba(0, 0, 0, 0.54)",
                "ticksFormat" : { },
                "showTicks" : true,
                "ticksColor" : "rgba(0, 0, 0, 0.54)",
                "showLine" : true,
                "lineColor" : "rgba(0, 0, 0, 0.54)",
                "showSplitLines" : true,
                "splitLinesColor" : "rgba(0, 0, 0, 0.12)"
              },
              "legendLabelFont" : {
                "family" : "Roboto",
                "size" : 12,
                "sizeUnit" : "px",
                "style" : "normal",
                "weight" : "400",
                "lineHeight" : "16px"
              },
              "legendLabelColor" : "rgba(0, 0, 0, 0.76)",
              "showTooltip" : true,
              "tooltipTrigger" : "axis",
              "tooltipValueFont" : {
                "family" : "Roboto",
                "size" : 12,
                "sizeUnit" : "px",
                "style" : "normal",
                "weight" : "500",
                "lineHeight" : "16px"
              },
              "tooltipValueColor" : "rgba(0, 0, 0, 0.76)",
              "tooltipShowDate" : true,
              "tooltipDateFormat" : {
                "format" : null,
                "lastUpdateAgo" : false,
                "custom" : false,
                "auto" : true,
                "autoDateFormatSettings" : { }
              },
              "tooltipDateFont" : {
                "family" : "Roboto",
                "size" : 11,
                "sizeUnit" : "px",
                "style" : "normal",
                "weight" : "400",
                "lineHeight" : "16px"
              },
              "tooltipDateColor" : "rgba(0, 0, 0, 0.76)",
              "tooltipDateInterval" : true,
              "tooltipBackgroundColor" : "rgba(255, 255, 255, 0.76)",
              "tooltipBackgroundBlur" : 4,
              "background" : {
                "type" : "color",
                "color" : "#fff",
                "overlay" : {
                  "enabled" : false,
                  "color" : "rgba(255,255,255,0.72)",
                  "blur" : 3
                }
              },
              "yAxes" : {
                "default" : {
                  "units" : null,
                  "decimals" : 0,
                  "show" : true,
                  "label" : "",
                  "labelFont" : {
                    "family" : "Roboto",
                    "size" : 12,
                    "sizeUnit" : "px",
                    "style" : "normal",
                    "weight" : "600",
                    "lineHeight" : "1"
                  },
                  "labelColor" : "rgba(0, 0, 0, 0.54)",
                  "position" : "left",
                  "showTickLabels" : true,
                  "tickLabelFont" : {
                    "family" : "Roboto",
                    "size" : 12,
                    "sizeUnit" : "px",
                    "style" : "normal",
                    "weight" : "400",
                    "lineHeight" : "1"
                  },
                  "tickLabelColor" : "rgba(0, 0, 0, 0.54)",
                  "ticksFormatter" : null,
                  "showTicks" : true,
                  "ticksColor" : "rgba(0, 0, 0, 0.54)",
                  "showLine" : true,
                  "lineColor" : "rgba(0, 0, 0, 0.54)",
                  "showSplitLines" : true,
                  "splitLinesColor" : "rgba(0, 0, 0, 0.12)",
                  "id" : "default",
                  "order" : 0,
                  "min" : 0,
                  "interval" : 200,
                  "splitNumber" : null
                }
              },
              "noAggregationBarWidthSettings" : {
                "strategy" : "group",
                "groupWidth" : {
                  "relative" : true,
                  "relativeWidth" : 2,
                  "absoluteWidth" : 1000
                },
                "barWidth" : {
                  "relative" : true,
                  "relativeWidth" : 2,
                  "absoluteWidth" : 1000
                }
              },
              "animation" : {
                "animation" : true,
                "animationThreshold" : 2000,
                "animationDuration" : 1000,
                "animationEasing" : "cubicOut",
                "animationDelay" : 0,
                "animationDurationUpdate" : 300,
                "animationEasingUpdate" : "cubicOut",
                "animationDelayUpdate" : 0
              },
              "padding" : "12px"
            },
            "title" : "CO₂",
            "dropShadow" : false,
            "enableFullscreen" : true,
            "titleStyle" : null,
            "configMode" : "basic",
            "actions" : { },
            "showTitleIcon" : false,
            "titleIcon" : "thermostat",
            "iconColor" : "#1F6BDD",
            "useDashboardTimewindow" : false,
            "displayTimewindow" : true,
            "titleFont" : {
              "size" : 16,
              "sizeUnit" : "px",
              "family" : "Roboto",
              "weight" : "400",
              "style" : "normal",
              "lineHeight" : "24px"
            },
            "titleColor" : "rgba(0, 0, 0, 0.87)",
            "titleTooltip" : "",
            "widgetStyle" : {
              "border-radius" : "8px",
              "box-shadow" : "0px 0px 5px rgba(0, 0, 0, 0.05), 0px 0px 20px -10px rgba(16, 16, 16, 0.35)"
            },
            "widgetCss" : "",
            "pageSize" : 1024,
            "units" : "",
            "decimals" : null,
            "noDataDisplayMessage" : "",
            "timewindowStyle" : {
              "showIcon" : false,
              "iconSize" : "24px",
              "icon" : null,
              "iconPosition" : "left",
              "font" : {
                "size" : 12,
                "sizeUnit" : "px",
                "family" : "Roboto",
                "weight" : "400",
                "style" : "normal",
                "lineHeight" : "16px"
              },
              "color" : "rgba(0, 0, 0, 0.38)",
              "displayTypePrefix" : true
            },
            "margin" : "0px",
            "borderRadius" : "0px",
            "iconSize" : "0px"
          },
          "row" : 0,
          "col" : 0,
          "id" : "e6dabb3b-d6f7-1208-2a9d-46c1ba9d4c2e"
        },
        "b8c5b050-a2a8-d339-d29f-ef536fd210e9" : {
          "typeFullFqn" : "system.time_series_chart",
          "type" : "timeseries",
          "sizeX" : 8,
          "sizeY" : 5,
          "config" : {
            "datasources" : [ {
              "type" : "entity",
              "name" : "",
              "entityAliasId" : "12ae98c7-1ea2-52cf-64d5-763e9d993547",
              "dataKeys" : [ {
                "name" : "tvoc",
                "type" : "timeseries",
                "label" : "TVOCs",
                "color" : "#2196F3",
                "settings" : {
                  "yAxisId" : "default",
                  "showInLegend" : true,
                  "dataHiddenByDefault" : false,
                  "type" : "line",
                  "lineSettings" : {
                    "showLine" : true,
                    "step" : false,
                    "stepType" : "start",
                    "smooth" : true,
                    "lineType" : "solid",
                    "lineWidth" : 2.5,
                    "showPoints" : false,
                    "showPointLabel" : false,
                    "pointLabelPosition" : "top",
                    "pointLabelFont" : {
                      "family" : "Roboto",
                      "size" : 11,
                      "sizeUnit" : "px",
                      "style" : "normal",
                      "weight" : "400",
                      "lineHeight" : "1"
                    },
                    "pointLabelColor" : "rgba(0, 0, 0, 0.76)",
                    "pointShape" : "circle",
                    "pointSize" : 14,
                    "fillAreaSettings" : {
                      "type" : "gradient",
                      "opacity" : 0.4,
                      "gradient" : {
                        "start" : 60,
                        "end" : 10
                      }
                    }
                  },
                  "barSettings" : {
                    "showBorder" : false,
                    "borderWidth" : 2,
                    "borderRadius" : 0,
                    "showLabel" : false,
                    "labelPosition" : "top",
                    "labelFont" : {
                      "family" : "Roboto",
                      "size" : 11,
                      "sizeUnit" : "px",
                      "style" : "normal",
                      "weight" : "400",
                      "lineHeight" : "1"
                    },
                    "labelColor" : "rgba(0, 0, 0, 0.76)",
                    "backgroundSettings" : {
                      "type" : "none",
                      "opacity" : 0.4,
                      "gradient" : {
                        "start" : 100,
                        "end" : 0
                      }
                    }
                  }
                },
                "_hash" : 0.8585641404847304,
                "units" : "mg/m³",
                "decimals" : 1,
                "aggregationType" : null,
                "funcBody" : null,
                "usePostProcessing" : null,
                "postFuncBody" : null
              } ],
              "alarmFilterConfig" : {
                "statusList" : [ "ACTIVE" ]
              },
              "latestDataKeys" : [ ]
            } ],
            "timewindow" : {
              "hideInterval" : false,
              "hideLastInterval" : false,
              "hideQuickInterval" : false,
              "hideAggregation" : false,
              "hideAggInterval" : false,
              "hideTimezone" : false,
              "selectedTab" : 0,
              "realtime" : {
                "realtimeType" : 0,
                "timewindowMs" : 604800000,
                "quickInterval" : "CURRENT_DAY",
                "interval" : 1800000
              },
              "aggregation" : {
                "type" : "AVG",
                "limit" : 25000
              },
              "timezone" : null
            },
            "showTitle" : true,
            "backgroundColor" : "rgba(0, 0, 0, 0)",
            "color" : "rgba(0, 0, 0, 0.87)",
            "padding" : "0px",
            "settings" : {
              "showLegend" : true,
              "legendConfig" : {
                "direction" : "column",
                "position" : "bottom",
                "sortDataKeys" : false,
                "showMin" : true,
                "showMax" : true,
                "showAvg" : true,
                "showTotal" : false,
                "showLatest" : false
              },
              "thresholds" : [ {
                "type" : "constant",
                "yAxisId" : "default",
                "units" : "mg/m³",
                "decimals" : 1,
                "lineColor" : "#FF0000",
                "lineType" : "solid",
                "lineWidth" : 2,
                "startSymbol" : "none",
                "startSymbolSize" : 5,
                "endSymbol" : "arrow",
                "endSymbolSize" : 8,
                "showLabel" : true,
                "labelPosition" : "end",
                "labelFont" : {
                  "size" : 14,
                  "family" : "Roboto",
                  "weight" : "500",
                  "style" : "normal"
                },
                "labelColor" : "#FF0000",
                "value" : 0.6
              } ],
              "dataZoom" : true,
              "stack" : false,
              "yAxis" : {
                "show" : true,
                "label" : "",
                "labelFont" : {
                  "family" : "Roboto",
                  "size" : 12,
                  "sizeUnit" : "px",
                  "style" : "normal",
                  "weight" : "600",
                  "lineHeight" : "1"
                },
                "labelColor" : "rgba(0, 0, 0, 0.54)",
                "position" : "left",
                "showTickLabels" : true,
                "tickLabelFont" : {
                  "family" : "Roboto",
                  "size" : 12,
                  "sizeUnit" : "px",
                  "style" : "normal",
                  "weight" : "400",
                  "lineHeight" : "1"
                },
                "tickLabelColor" : "rgba(0, 0, 0, 0.54)",
                "showTicks" : true,
                "ticksColor" : "rgba(0, 0, 0, 0.54)",
                "showLine" : true,
                "lineColor" : "rgba(0, 0, 0, 0.54)",
                "showSplitLines" : true,
                "splitLinesColor" : "rgba(0, 0, 0, 0.12)"
              },
              "xAxis" : {
                "show" : true,
                "label" : "",
                "labelFont" : {
                  "family" : "Roboto",
                  "size" : 12,
                  "sizeUnit" : "px",
                  "style" : "normal",
                  "weight" : "600",
                  "lineHeight" : "1"
                },
                "labelColor" : "rgba(0, 0, 0, 0.54)",
                "position" : "bottom",
                "showTickLabels" : true,
                "tickLabelFont" : {
                  "family" : "Roboto",
                  "size" : 10,
                  "sizeUnit" : "px",
                  "style" : "normal",
                  "weight" : "400",
                  "lineHeight" : "1"
                },
                "tickLabelColor" : "rgba(0, 0, 0, 0.54)",
                "ticksFormat" : { },
                "showTicks" : true,
                "ticksColor" : "rgba(0, 0, 0, 0.54)",
                "showLine" : true,
                "lineColor" : "rgba(0, 0, 0, 0.54)",
                "showSplitLines" : true,
                "splitLinesColor" : "rgba(0, 0, 0, 0.12)"
              },
              "legendLabelFont" : {
                "family" : "Roboto",
                "size" : 12,
                "sizeUnit" : "px",
                "style" : "normal",
                "weight" : "400",
                "lineHeight" : "16px"
              },
              "legendLabelColor" : "rgba(0, 0, 0, 0.76)",
              "showTooltip" : true,
              "tooltipTrigger" : "axis",
              "tooltipValueFont" : {
                "family" : "Roboto",
                "size" : 12,
                "sizeUnit" : "px",
                "style" : "normal",
                "weight" : "500",
                "lineHeight" : "16px"
              },
              "tooltipValueColor" : "rgba(0, 0, 0, 0.76)",
              "tooltipShowDate" : true,
              "tooltipDateFormat" : {
                "format" : null,
                "lastUpdateAgo" : false,
                "custom" : false,
                "auto" : true,
                "autoDateFormatSettings" : { }
              },
              "tooltipDateFont" : {
                "family" : "Roboto",
                "size" : 11,
                "sizeUnit" : "px",
                "style" : "normal",
                "weight" : "400",
                "lineHeight" : "16px"
              },
              "tooltipDateColor" : "rgba(0, 0, 0, 0.76)",
              "tooltipDateInterval" : true,
              "tooltipBackgroundColor" : "rgba(255, 255, 255, 0.76)",
              "tooltipBackgroundBlur" : 4,
              "background" : {
                "type" : "color",
                "color" : "#fff",
                "overlay" : {
                  "enabled" : false,
                  "color" : "rgba(255,255,255,0.72)",
                  "blur" : 3
                }
              },
              "yAxes" : {
                "default" : {
                  "units" : null,
                  "decimals" : 2,
                  "show" : true,
                  "label" : "",
                  "labelFont" : {
                    "family" : "Roboto",
                    "size" : 12,
                    "sizeUnit" : "px",
                    "style" : "normal",
                    "weight" : "600",
                    "lineHeight" : "1"
                  },
                  "labelColor" : "rgba(0, 0, 0, 0.54)",
                  "position" : "left",
                  "showTickLabels" : true,
                  "tickLabelFont" : {
                    "family" : "Roboto",
                    "size" : 12,
                    "sizeUnit" : "px",
                    "style" : "normal",
                    "weight" : "400",
                    "lineHeight" : "1"
                  },
                  "tickLabelColor" : "rgba(0, 0, 0, 0.54)",
                  "ticksFormatter" : null,
                  "showTicks" : true,
                  "ticksColor" : "rgba(0, 0, 0, 0.54)",
                  "showLine" : true,
                  "lineColor" : "rgba(0, 0, 0, 0.54)",
                  "showSplitLines" : true,
                  "splitLinesColor" : "rgba(0, 0, 0, 0.12)",
                  "id" : "default",
                  "order" : 0,
                  "min" : 0,
                  "interval" : 0.05,
                  "splitNumber" : null,
                  "max" : null
                }
              },
              "noAggregationBarWidthSettings" : {
                "strategy" : "group",
                "groupWidth" : {
                  "relative" : true,
                  "relativeWidth" : 2,
                  "absoluteWidth" : 1000
                },
                "barWidth" : {
                  "relative" : true,
                  "relativeWidth" : 2,
                  "absoluteWidth" : 1000
                }
              },
              "animation" : {
                "animation" : true,
                "animationThreshold" : 2000,
                "animationDuration" : 1000,
                "animationEasing" : "cubicOut",
                "animationDelay" : 0,
                "animationDurationUpdate" : 300,
                "animationEasingUpdate" : "cubicOut",
                "animationDelayUpdate" : 0
              },
              "padding" : "12px"
            },
            "title" : "TVOCs",
            "dropShadow" : false,
            "enableFullscreen" : true,
            "titleStyle" : null,
            "configMode" : "basic",
            "actions" : { },
            "showTitleIcon" : false,
            "titleIcon" : "thermostat",
            "iconColor" : "#1F6BDD",
            "useDashboardTimewindow" : false,
            "displayTimewindow" : true,
            "titleFont" : {
              "size" : 16,
              "sizeUnit" : "px",
              "family" : "Roboto",
              "weight" : "400",
              "style" : "normal",
              "lineHeight" : "24px"
            },
            "titleColor" : "rgba(0, 0, 0, 0.87)",
            "titleTooltip" : "",
            "widgetStyle" : {
              "border-radius" : "8px",
              "box-shadow" : "0px 0px 5px rgba(0, 0, 0, 0.05), 0px 0px 20px -10px rgba(16, 16, 16, 0.35)"
            },
            "widgetCss" : "",
            "pageSize" : 1024,
            "units" : "",
            "decimals" : null,
            "noDataDisplayMessage" : "",
            "timewindowStyle" : {
              "showIcon" : false,
              "iconSize" : "24px",
              "icon" : null,
              "iconPosition" : "left",
              "font" : {
                "size" : 12,
                "sizeUnit" : "px",
                "family" : "Roboto",
                "weight" : "400",
                "style" : "normal",
                "lineHeight" : "16px"
              },
              "color" : "rgba(0, 0, 0, 0.38)",
              "displayTypePrefix" : true
            },
            "margin" : "0px",
            "borderRadius" : "0px",
            "iconSize" : "0px"
          },
          "row" : 0,
          "col" : 0,
          "id" : "b8c5b050-a2a8-d339-d29f-ef536fd210e9"
        }
      },
      "states" : {
        "map" : {
          "name" : "Edit location air sensors",
          "root" : false,
          "layouts" : {
            "main" : {
              "widgets" : {
                "00fb2742-ba1f-7e43-673f-d6c08b72ed06" : {
                  "sizeX" : 24,
                  "sizeY" : 12,
                  "row" : 0,
                  "col" : 0
                }
              },
              "gridSettings" : {
                "backgroundColor" : "#f7f8fa",
                "color" : "rgba(0,0,0,0.870588)",
                "columns" : 24,
                "backgroundSizeMode" : "100%",
                "autoFillHeight" : true,
                "mobileAutoFillHeight" : true,
                "mobileRowHeight" : 70,
                "margin" : 10,
                "backgroundImageUrl" : null,
                "outerMargin" : true
              }
            }
          }
        },
        "chart" : {
          "name" : "${entityName}",
          "root" : false,
          "layouts" : {
            "main" : {
              "widgets" : {
                "181424bc-7051-1cac-3583-b959bddceca2" : {
                  "sizeX" : 9,
                  "sizeY" : 6,
                  "row" : 6,
                  "col" : 0,
                  "mobileOrder" : 4,
                  "mobileHeight" : 5
                },
                "c82915da-d868-d5ad-f4eb-3f36cc05fa83" : {
                  "sizeX" : 9,
                  "sizeY" : 6,
                  "mobileOrder" : 3,
                  "mobileHeight" : 5,
                  "row" : 0,
                  "col" : 0
                },
                "e6dabb3b-d6f7-1208-2a9d-46c1ba9d4c2e" : {
                  "sizeX" : 15,
                  "sizeY" : 6,
                  "mobileOrder" : 1,
                  "mobileHeight" : 6,
                  "row" : 0,
                  "col" : 9
                },
                "b8c5b050-a2a8-d339-d29f-ef536fd210e9" : {
                  "sizeX" : 15,
                  "sizeY" : 6,
                  "mobileOrder" : 2,
                  "mobileHeight" : 6,
                  "row" : 6,
                  "col" : 9
                }
              },
              "gridSettings" : {
                "backgroundColor" : "#f7f8fa",
                "color" : "rgba(0,0,0,0.870588)",
                "columns" : 24,
                "backgroundSizeMode" : "100%",
                "autoFillHeight" : true,
                "mobileAutoFillHeight" : false,
                "mobileRowHeight" : 70,
                "margin" : 10,
                "backgroundImageUrl" : null,
                "outerMargin" : true
              }
            }
          }
        },
        "offices" : {
          "name" : "Buildings",
          "root" : true,
          "layouts" : {
            "main" : {
              "widgets" : {
                "c53ac101-aab7-8d2c-2805-7c0376fe77d4" : {
                  "sizeX" : 12,
                  "sizeY" : 6,
                  "row" : 0,
                  "col" : 0,
                  "mobileOrder" : 1,
                  "mobileHeight" : 6
                },
                "6363d7ed-b0f5-75c3-333c-990e9c1799bb" : {
                  "sizeX" : 12,
                  "sizeY" : 6,
                  "row" : 6,
                  "col" : 0,
                  "mobileOrder" : 3,
                  "mobileHeight" : 6
                },
                "f9429338-e7fd-ed66-71ac-8552a6eb0eaf" : {
                  "sizeX" : 12,
                  "sizeY" : 12,
                  "row" : 0,
                  "col" : 12,
                  "mobileOrder" : 2,
                  "mobileHeight" : 3
                }
              },
              "gridSettings" : {
                "backgroundColor" : "#f7f8fa",
                "columns" : 24,
                "margin" : 10,
                "backgroundSizeMode" : "100%",
                "autoFillHeight" : true,
                "backgroundImageUrl" : null,
                "mobileAutoFillHeight" : false,
                "mobileRowHeight" : 70,
                "outerMargin" : true
              }
            }
          }
        },
        "office" : {
          "name" : "${entityName}",
          "root" : false,
          "layouts" : {
            "main" : {
              "widgets" : {
                "f33c746c-0dfc-c212-395b-b448c8a17209" : {
                  "sizeX" : 11,
                  "sizeY" : 5,
                  "row" : 0,
                  "col" : 0,
                  "mobileOrder" : 1,
                  "mobileHeight" : 6
                },
                "7943196b-eedb-d422-f9c3-b32d379ad172" : {
                  "sizeX" : 11,
                  "sizeY" : 6,
                  "row" : 5,
                  "col" : 0,
                  "mobileOrder" : 3,
                  "mobileHeight" : 6
                },
                "3da9a9a1-0b9a-2e1f-0dcb-0ff34a695abb" : {
                  "sizeX" : 13,
                  "sizeY" : 11,
                  "row" : 0,
                  "col" : 11,
                  "mobileOrder" : 2,
                  "mobileHeight" : 4
                }
              },
              "gridSettings" : {
                "backgroundColor" : "#f7f8fa",
                "color" : "rgba(0,0,0,0.870588)",
                "columns" : 24,
                "backgroundSizeMode" : "100%",
                "autoFillHeight" : true,
                "mobileAutoFillHeight" : false,
                "mobileRowHeight" : 70,
                "margin" : 10,
                "backgroundImageUrl" : null,
                "outerMargin" : true
              }
            }
          }
        }
      },
      "entityAliases" : {
        "68a058e1-fdda-8482-715b-3ae4a488568e" : {
          "id" : "68a058e1-fdda-8482-715b-3ae4a488568e",
          "alias" : "Sensors",
          "filter" : {
            "type" : "deviceSearchQuery",
            "resolveMultiple" : true,
            "rootStateEntity" : true,
            "stateEntityParamName" : null,
            "defaultStateEntity" : null,
            "rootEntity" : {
              "entityType" : "ASSET",
              "id" : "dc4b7540-1498-11ec-ae40-37d2df2b0dc3"
            },
            "direction" : "FROM",
            "maxLevel" : 1,
            "fetchLastLevelOnly" : false,
            "relationType" : "Contains",
            "deviceTypes" : [ "Air Quality Sensor" ]
          }
        },
        "12ae98c7-1ea2-52cf-64d5-763e9d993547" : {
          "id" : "12ae98c7-1ea2-52cf-64d5-763e9d993547",
          "alias" : "State entity",
          "filter" : {
            "type" : "stateEntity",
            "resolveMultiple" : false,
            "stateEntityParamName" : null,
            "defaultStateEntity" : null
          }
        },
        "f41c2f1f-1282-2051-80cf-8eda923f4606" : {
          "id" : "f41c2f1f-1282-2051-80cf-8eda923f4606",
          "alias" : "Offices",
          "filter" : {
            "type" : "assetType",
            "resolveMultiple" : true,
            "assetNameFilter" : "",
            "assetTypes" : [ "office" ]
          }
        },
        "97948935-34d7-fcb6-9098-f0bcdf5f30a6" : {
          "id" : "97948935-34d7-fcb6-9098-f0bcdf5f30a6",
          "alias" : "Office",
          "filter" : {
            "type" : "assetSearchQuery",
            "resolveMultiple" : true,
            "rootStateEntity" : true,
            "stateEntityParamName" : null,
            "defaultStateEntity" : null,
            "rootEntity" : null,
            "direction" : "TO",
            "maxLevel" : 1,
            "fetchLastLevelOnly" : false,
            "relationType" : "Contains",
            "assetTypes" : [ "office" ]
          }
        }
      },
      "timewindow" : {
        "displayValue" : "",
        "selectedTab" : 0,
        "hideInterval" : false,
        "hideAggregation" : false,
        "hideAggInterval" : false,
        "realtime" : {
          "interval" : 1000,
          "timewindowMs" : 60000
        },
        "history" : {
          "historyType" : 0,
          "interval" : 1000,
          "timewindowMs" : 60000,
          "fixedTimewindow" : {
            "startTimeMs" : 1587473857304,
            "endTimeMs" : 1587560257304
          }
        },
        "aggregation" : {
          "type" : "AVG",
          "limit" : 25000
        }
      },
      "settings" : {
        "stateControllerId" : "entity",
        "showTitle" : false,
        "showDashboardsSelect" : false,
        "showEntitiesSelect" : false,
        "showDashboardTimewindow" : false,
        "showDashboardExport" : false,
        "toolbarAlwaysOpen" : true,
        "titleColor" : "rgba(0,0,0,0.870588)",
        "showFilters" : false,
        "showDashboardLogo" : false,
        "dashboardLogoUrl" : null,
        "hideToolbar" : false,
        "showUpdateDashboardImage" : false
      },
      "filters" : { }
    },
    "name" : "Indoor Air Quality",
    "resources" : null,
    "assignedCustomers" : [ {
      "customerId" : {
        "entityType" : "CUSTOMER",
        "id" : "6ca123f0-db93-11ef-9dbc-834dadad7dd9"
      },
      "title" : "Demo Customer",
      "public" : false
    } ],
    "externalId" : null,
    "id" : {
      "entityType" : "DASHBOARD",
      "id" : "6d9bb090-db93-11ef-9dbc-834dadad7dd9"
    }
  },
  "relations" : [ ],
  "attributes" : {
    "SERVER_SCOPE" : [ ]
  }
}